<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ITK笔记——读取单个DICOM切片</title>
    <url>/2020/12/14/ITK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96%E5%8D%95%E4%B8%AADICOM%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<h2 id="什么是DICOM"><a href="#什么是DICOM" class="headerlink" title="什么是DICOM"></a>什么是DICOM</h2><p>DICOM(Digital imaging and Communication in Medicine)，医学数字成像与通信，它是一个国际标准(ISO 12052)，由美国放射学院(ACR)和国家电气制造协会(NEMA)在1970年代共同制定，旨在统一格式，解决医学图像的处理、存储、打印以及传输。</p>
<a id="more"></a>

<h2 id="GDCM"><a href="#GDCM" class="headerlink" title="GDCM"></a>GDCM</h2><p>GDCM(Grassroots DICOM)，开源库，DICOM标准的一种实现。ITK的DICOM设施，就是由它提供的。对应<strong>itk::GDCMImageIO</strong>类名。</p>
<h2 id="读取单个DICOM数据"><a href="#读取单个DICOM数据" class="headerlink" title="读取单个DICOM数据"></a>读取单个DICOM数据</h2><p><strong>定义数据类型</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> InputPixelType = <span class="keyword">signed</span> <span class="keyword">short</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> InputDimension = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> InputImageType = itk::Image&lt; InputPixelType, InputDimension &gt;;</span><br></pre></td></tr></table></figure>
<p><strong>初始化GDCM接口</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ImageIOType = itk::GDCMImageIO;</span><br><span class="line">ImageIOType::Pointer gdcmImageIO = ImageIOType::New();</span><br></pre></td></tr></table></figure>
<p><strong>设置ImageFileReader</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ReaderType = itk::ImageFileReader&lt; InputImageType &gt;;</span><br><span class="line">ReaderType::Pointer reader = ReaderType::New();</span><br><span class="line">reader-&gt;SetFileName(argv[<span class="number">1</span>]);</span><br><span class="line">reader-&gt;SetImageIO(gdcmImageIO);</span><br></pre></td></tr></table></figure>

<p><strong>触发读取</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">reader-&gt;Update();</span><br></pre></td></tr></table></figure>
<h2 id="VTK渲染"><a href="#VTK渲染" class="headerlink" title="VTK渲染"></a>VTK渲染</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QuickView viewer;</span><br><span class="line">viewer.AddImage(reader-&gt;GetOutput());</span><br><span class="line">viewer.Visualize();</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190915174435856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="ReadDICOMImage-cxx"><a href="#ReadDICOMImage-cxx" class="headerlink" title="ReadDICOMImage.cxx"></a>ReadDICOMImage.cxx</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImageFileReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkGDCMImageIO.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;QuickView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; DicomImage&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> InputPixelType = <span class="keyword">signed</span> <span class="keyword">short</span>;</span><br><span class="line">	<span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> InputDimension = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> InputImageType = itk::Image&lt; InputPixelType, InputDimension &gt;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ImageIOType = itk::GDCMImageIO;</span><br><span class="line">	ImageIOType::Pointer gdcmImageIO = ImageIOType::New();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ReaderType = itk::ImageFileReader&lt; InputImageType &gt;;</span><br><span class="line">	ReaderType::Pointer reader = ReaderType::New();</span><br><span class="line">	reader-&gt;SetFileName(argv[<span class="number">1</span>]);</span><br><span class="line">	reader-&gt;SetImageIO(gdcmImageIO);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		reader-&gt;Update();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> ( itk::ExceptionObject &amp;ex)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;exception in file reader &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; ex &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QuickView viewer;</span><br><span class="line">	viewer.AddImage(reader-&gt;GetOutput());</span><br><span class="line">	viewer.Visualize();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line"> </span><br><span class="line">project(ReadDICOMImage)</span><br><span class="line"> </span><br><span class="line">find_package(ITK REQUIRED)</span><br><span class="line">include($&#123;ITK_USE_FILE&#125;)</span><br><span class="line">if (ITKVtkGlue_LOADED)</span><br><span class="line">  find_package(VTK REQUIRED)</span><br><span class="line">  include($&#123;VTK_USE_FILE&#125;)</span><br><span class="line">else()</span><br><span class="line">  find_package(ItkVtkGlue REQUIRED)</span><br><span class="line">  include($&#123;ItkVtkGlue_USE_FILE&#125;)</span><br><span class="line">  set(Glue ItkVtkGlue)</span><br><span class="line">endif()</span><br><span class="line"> </span><br><span class="line">add_executable(ReadDICOMImage MACOSX_BUNDLE ReadDICOMImage.cxx)</span><br><span class="line">target_link_libraries(ReadDICOMImage</span><br><span class="line">  $&#123;Glue&#125;  $&#123;VTK_LIBRARIES&#125; $&#123;ITK_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><a href="https://github.com/AndyJMR/ReadDICOMImage">Example Download</a></strong></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://itk.org/Doxygen/html/Examples_2IO_2DicomImageReadWrite_8cxx-example.html">Examples/IO/DicomImageReadWrite.cxx</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190915175313436.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>ITK笔记</category>
      </categories>
      <tags>
        <tag>ITK</tag>
        <tag>VTK</tag>
        <tag>DICOM</tag>
        <tag>序列</tag>
        <tag>slice</tag>
      </tags>
  </entry>
  <entry>
    <title>ITK笔记——读取多帧DICOM图像</title>
    <url>/2020/12/14/ITK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96%E5%A4%9A%E5%B8%A7DICOM%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<p>上篇笔记介绍了单个DICOM图像的读取(<a href="https://blog.csdn.net/minmindianzi/article/details/100851171">ITK笔记——读取单个DICOM切片</a>)，接下来看如何读取DICOM序列以及使用。</p>
<a id="more"></a>

<h2 id="读取多个DICOM图像"><a href="#读取多个DICOM图像" class="headerlink" title="读取多个DICOM图像"></a>读取多个DICOM图像</h2><p><strong>定义数据类型</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PixelType = <span class="keyword">signed</span> <span class="keyword">short</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Dimension = <span class="number">3</span>; <span class="comment">// The dimension is 3, not 2</span></span><br><span class="line"><span class="keyword">using</span> ImageType = itk::Image&lt;PixelType, Dimension&gt;;</span><br></pre></td></tr></table></figure>
<p><strong>初始化GDCM接口</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ImageIOType = itk::GDCMImageIO;</span><br><span class="line">ImageIOType::Pointer dicomIO = ImageIOType::New();</span><br></pre></td></tr></table></figure>
<p><strong>设置ImageFileReader</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> NamesGeneratorType = itk::GDCMSeriesFileNames;</span><br><span class="line">NamesGeneratorType::Pointer nameGenarator = NamesGeneratorType::New();</span><br><span class="line">nameGenarator-&gt;SetDirectory(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> FilenamesContainer = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line">FilenamesContainer filenames = nameGenarator-&gt;GetInputFileNames();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ReaderType = itk::ImageSeriesReader&lt;ImageType&gt;;</span><br><span class="line">ReaderType::Pointer reader = ReaderType::New();</span><br><span class="line">reader-&gt;SetImageIO(dicomIO);</span><br><span class="line">reader-&gt;SetFileNames(filenames);</span><br></pre></td></tr></table></figure>
<p><strong>执行读取</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">reader-&gt;Update();</span><br></pre></td></tr></table></figure>

<h2 id="使用DICOM数据"><a href="#使用DICOM数据" class="headerlink" title="使用DICOM数据"></a>使用DICOM数据</h2><p><strong>获取医学信息</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">512</span>];</span><br><span class="line">dicomIO-&gt;GetPatientName(name);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;patient: &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Dictionary = itk::MetaDataDictionary;</span><br><span class="line"><span class="keyword">using</span> MetaDataStringType = itk::MetaDataObject&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> Dictionary&amp; dic = dicomIO-&gt;GetMetaDataDictionary();</span><br><span class="line"><span class="keyword">auto</span> itr = dic.Begin();</span><br><span class="line"><span class="keyword">auto</span> end = dic.End();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> entryId = <span class="string">&quot;0010|0010&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> tagItr = dic.Find(entryId);</span><br><span class="line"><span class="keyword">if</span> (tagItr != end)</span><br><span class="line">&#123;</span><br><span class="line">	MetaDataStringType::ConstPointer entryvalue =</span><br><span class="line">		<span class="keyword">dynamic_cast</span>&lt;<span class="keyword">const</span> MetaDataStringType*&gt; (tagItr-&gt;second.GetPointer());</span><br><span class="line">	<span class="keyword">if</span> (entryvalue)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> tagvalue = entryvalue-&gt;GetMetaDataObjectValue();</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;patient: &quot;</span> &lt;&lt; tagvalue &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>转成VTK格式数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ImageConnector = itk::ImageToVTKImageFilter&lt;ImageType&gt;;</span><br><span class="line">ImageConnector::Pointer imageConnector = ImageConnector::New();</span><br><span class="line">imageConnector-&gt;SetInput(reader-&gt;GetOutput());</span><br><span class="line">imageConnector-&gt;Update();</span><br></pre></td></tr></table></figure>

<h2 id="ReadDICMOSeries-cxx"><a href="#ReadDICMOSeries-cxx" class="headerlink" title="ReadDICMOSeries.cxx"></a>ReadDICMOSeries.cxx</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkGDCMImageIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkGDCMSeriesFileNames.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImageSeriesReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImageToVTKImageFilter.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; DicomDirectory&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> PixelType = <span class="keyword">signed</span> <span class="keyword">short</span>;</span><br><span class="line">	<span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Dimension = <span class="number">3</span>; <span class="comment">// The dimension is 3, not 2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ImageType = itk::Image&lt;PixelType, Dimension&gt;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ImageIOType = itk::GDCMImageIO;</span><br><span class="line">	ImageIOType::Pointer dicomIO = ImageIOType::New();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> NamesGeneratorType = itk::GDCMSeriesFileNames;</span><br><span class="line">	NamesGeneratorType::Pointer nameGenarator = NamesGeneratorType::New();</span><br><span class="line">	nameGenarator-&gt;SetDirectory(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> FilenamesContainer = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line">	FilenamesContainer filenames = nameGenarator-&gt;GetInputFileNames();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ReaderType = itk::ImageSeriesReader&lt;ImageType&gt;;</span><br><span class="line">	ReaderType::Pointer reader = ReaderType::New();</span><br><span class="line">	reader-&gt;SetImageIO(dicomIO);</span><br><span class="line">	reader-&gt;SetFileNames(filenames);</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		reader-&gt;Update();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (itk::ExceptionObject&amp; ex)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ex &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">512</span>];</span><br><span class="line">	dicomIO-&gt;GetPatientName(name);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;patient: &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> Dictionary = itk::MetaDataDictionary;</span><br><span class="line">	<span class="keyword">using</span> MetaDataStringType = itk::MetaDataObject&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line">	<span class="keyword">const</span> Dictionary&amp; dic = dicomIO-&gt;GetMetaDataDictionary();</span><br><span class="line">	<span class="keyword">auto</span> itr = dic.Begin();</span><br><span class="line">	<span class="keyword">auto</span> end = dic.End();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> entryId = <span class="string">&quot;0010|0010&quot;</span>;</span><br><span class="line">	<span class="keyword">auto</span> tagItr = dic.Find(entryId);</span><br><span class="line">	<span class="keyword">if</span> (tagItr != end)</span><br><span class="line">	&#123;</span><br><span class="line">		MetaDataStringType::ConstPointer entryvalue =</span><br><span class="line">			<span class="keyword">dynamic_cast</span>&lt;<span class="keyword">const</span> MetaDataStringType*&gt; (tagItr-&gt;second.GetPointer());</span><br><span class="line">		<span class="keyword">if</span> (entryvalue)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">string</span> tagvalue = entryvalue-&gt;GetMetaDataObjectValue();</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;patient: &quot;</span> &lt;&lt; tagvalue &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> ImageConnector = itk::ImageToVTKImageFilter&lt;ImageType&gt;;</span><br><span class="line">	ImageConnector::Pointer imageConnector = ImageConnector::New();</span><br><span class="line">	imageConnector-&gt;SetInput(reader-&gt;GetOutput());</span><br><span class="line">	imageConnector-&gt;Update();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><p><a href="https://github.com/AndyJMR/ReadDICOMSeries"><strong>Example Download</strong></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line"></span><br><span class="line">project(ReadDICOMSeries)</span><br><span class="line"></span><br><span class="line">find_package(ITK REQUIRED)</span><br><span class="line">include($&#123;ITK_USE_FILE&#125;)</span><br><span class="line"></span><br><span class="line">add_executable(ReadDICMOSeries ReadDICMOSeries.cxx)</span><br><span class="line">target_link_libraries(ReadDICMOSeries $&#123;ITK_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure>

<p><a href="https://dicom.innolitics.com/ciods">DICOM tag</a><br><img src="https://img-blog.csdnimg.cn/20191026105325161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://itk.org/Doxygen/html/Examples_2IO_2DicomSeriesReadImageWrite2_8cxx-example.html">Examples/IO/DicomSeriesReadImageWrite2.cxx</a><br><img src="https://img-blog.csdnimg.cn/2019102610395745.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>ITK笔记</category>
      </categories>
      <tags>
        <tag>ITK</tag>
        <tag>DICOM</tag>
        <tag>序列</tag>
        <tag>slice</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——Widget简介</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Widget%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>很多时候，3D模型软件需要和用户进行交互，比如按钮单击，鼠标移动，滚轮缩放，快捷键控制等等。在VTK中，widget可以为这些复杂的交互提供便利。比如，vtkBoxWidget2 允许你在屏幕上移动box，它提供了平移box，旋转和缩放这个box的操作。当然，你会说，这些可以用vtkCubeSource 和指定的vtkInteractorStyle来实现，没错，但相比而言，widget以一种更一般，更便利和更独立的方式提供了所有的这些操作。</p>
<a id="more"></a>

<p>widget包含两个重要的组成部分：<strong>Interaction</strong>和<strong>Representation</strong>.</p>
<h2 id="Interaction"><a href="#Interaction" class="headerlink" title="Interaction"></a>Interaction</h2><p><strong>Interaction</strong>是一些名叫vtk*Widget的类（比如vtkBoxWidget2）。它包含了交互的所有选项和事件处理。</p>
<h2 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h2><p><strong>Representation</strong>是显示并与之交互的一类对象，以名叫vtk*Representation.</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>创建一个widget:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkBoxWidget2&gt; boxWidget =</span><br><span class="line">  vtkSmartPointer&lt;vtkBoxWidget2&gt;::New();</span><br><span class="line">boxWidget-&gt;SetInteractor( renderWindowInteractor );</span><br></pre></td></tr></table></figure>

<p>大多数widget都有默认的representation。如果你想改变它，可以手动创建一个representation并设置到widget.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> vtkSmartPointer&lt;vtkBoxRepresentation&gt; boxRep =</span><br><span class="line">vtkSmartPointer&lt;vtkBoxRepresentation&gt;::New();</span><br><span class="line"> boxRep-&gt;SetPlaceFactor(<span class="number">1</span>);</span><br><span class="line"> boxRep-&gt;PlaceWidget(actor-&gt;GetBounds());</span><br><span class="line"> boxWidget-&gt;SetRepresentation(boxRep);</span><br></pre></td></tr></table></figure>

<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>往往你希望响应用户在widget上所作的操作，那这时候就需要定义一个vtkCommand的子类，并在一个类似于vtkCallbackFunction回调函数的方法Execute中来处理这些操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vtkBoxCallback</span> :</span> <span class="keyword">public</span> vtkCommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> vtkBoxCallback *<span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> vtkBoxCallback;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; m_actor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetActor</span><span class="params">(vtkSmartPointer&lt;vtkActor&gt; actor)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_actor = actor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">(vtkObject *caller, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">void</span>*)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    vtkSmartPointer&lt;vtkBoxWidget2&gt; boxWidget =</span><br><span class="line">      <span class="keyword">dynamic_cast</span>&lt;vtkBoxWidget2*&gt;(caller);</span><br><span class="line"></span><br><span class="line">    vtkSmartPointer&lt;vtkTransform&gt; t =</span><br><span class="line">      vtkSmartPointer&lt;vtkTransform&gt;::New();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">dynamic_cast</span>&lt;vtkBoxRepresentation*&gt;(boxWidget-&gt;GetRepresentation())-&gt;GetTransform(t);</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_actor-&gt;SetUserTransform(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vtkBoxCallback()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><p>将自定义的事件添加到widget上，需要创建vtkCommand对象并调用widget的AddObserver方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkBoxCallback&gt; boxCallback =</span><br><span class="line">  vtkSmartPointer&lt;vtkBoxCallback&gt;::New();</span><br><span class="line">boxCallback-&gt;SetActor(actor);</span><br><span class="line">boxWidget-&gt;AddObserver(vtkCommand::InteractionEvent, boxCallback);</span><br></pre></td></tr></table></figure>

<h2 id="启用Widget"><a href="#启用Widget" class="headerlink" title="启用Widget"></a>启用Widget</h2><p>使用Widget时，一定要注意顺序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">boxWidget-&gt;On();</span><br><span class="line"></span><br><span class="line">renderWindowInteractor-&gt;Start();</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/2019042215025336.gif" alt="在这里插入图片描述"></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkConeSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkInteractorStyleTrackballCamera.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkBoxWidget2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkBoxRepresentation.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCommand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkTransform.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vtkBoxCallback</span> :</span> <span class="keyword">public</span> vtkCommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> vtkBoxCallback *<span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> vtkBoxCallback;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; m_actor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetActor</span><span class="params">(vtkSmartPointer&lt;vtkActor&gt; actor)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_actor = actor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">(vtkObject *caller, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">void</span>*)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    vtkSmartPointer&lt;vtkBoxWidget2&gt; boxWidget =</span><br><span class="line">      <span class="keyword">dynamic_cast</span>&lt;vtkBoxWidget2*&gt;(caller);</span><br><span class="line"></span><br><span class="line">    vtkSmartPointer&lt;vtkTransform&gt; t =</span><br><span class="line">      vtkSmartPointer&lt;vtkTransform&gt;::New();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">dynamic_cast</span>&lt;vtkBoxRepresentation*&gt;(boxWidget-&gt;GetRepresentation())-&gt;GetTransform(t);</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_actor-&gt;SetUserTransform(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vtkBoxCallback()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vtkSmartPointer&lt;vtkConeSource&gt; coneSource =</span><br><span class="line">    vtkSmartPointer&lt;vtkConeSource&gt;::New();</span><br><span class="line">  coneSource-&gt;SetHeight(<span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; mapper =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  mapper-&gt;SetInputConnection(coneSource-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; actor = vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">  actor-&gt;SetMapper(mapper);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">  renderer-&gt;AddActor(actor);</span><br><span class="line">  renderer-&gt;ResetCamera(); </span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">  renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">  renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt; style =</span><br><span class="line">    vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt;::New();</span><br><span class="line">  renderWindowInteractor-&gt;SetInteractorStyle(style);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkBoxWidget2&gt; boxWidget =</span><br><span class="line">    vtkSmartPointer&lt;vtkBoxWidget2&gt;::New();</span><br><span class="line">  boxWidget-&gt;SetInteractor(renderWindowInteractor);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkBoxRepresentation&gt; boxRep =</span><br><span class="line">	vtkSmartPointer&lt;vtkBoxRepresentation&gt;::New();</span><br><span class="line">  boxRep-&gt;SetPlaceFactor(<span class="number">1</span>);</span><br><span class="line">  boxRep-&gt;PlaceWidget(actor-&gt;GetBounds());</span><br><span class="line">  boxWidget-&gt;SetRepresentation(boxRep);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkBoxCallback&gt; boxCallback =</span><br><span class="line">    vtkSmartPointer&lt;vtkBoxCallback&gt;::New();</span><br><span class="line">  boxCallback-&gt;SetActor(actor);</span><br><span class="line">  boxWidget-&gt;AddObserver(vtkCommand::InteractionEvent, boxCallback);</span><br><span class="line"></span><br><span class="line">  boxWidget-&gt;On();</span><br><span class="line"></span><br><span class="line">  renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://vtk.org/Wiki/VTK/Tutorials/Widgets">VTK Widgets Tutorials</a><br><a href="https://lorensen.github.io/VTKExamples/site/Cxx/#widgets">VTKExamples-Widgets</a><br><img src="https://img-blog.csdnimg.cn/20190419170707749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190422150423250.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>Widget</tag>
        <tag>Interaction</tag>
        <tag>Representation</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——医学图像的切片提取(vtkImageReslice)</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%87%E7%89%87%E6%8F%90%E5%8F%96(vtkImageReslice)/</url>
    <content><![CDATA[<p>医学图像的浏览和内部分析是很常见也很重要的功能，我们不仅可以从矢状面、冠状面和轴状面这样的切面去看，还可以从任意切面去看。在VTK术语中，切面（切片）就是图像数据。</p>
<a id="more"></a>

<h2 id="vtkImageReslice"><a href="#vtkImageReslice" class="headerlink" title="vtkImageReslice"></a>vtkImageReslice</h2><p>vtkImageReslice，功能非常强大，有“瑞士军刀”的美誉。它不仅可以提取切片，还有图像旋转，翻转，重采样，变形等功能，并且效率还很高。这里只用到它的提取功能。<br><strong>切片提取</strong><br>切片提取的关键是要给出ResliceAxes，实际上，它是一个4X4的矩阵。我们可以这样来理解：把这个矩阵看作是新坐标系在原坐标下的坐标表示，一个齐次坐标系。前三列分别表示新坐标系下x、y、z的向量坐标，第四列表示新坐标系下原点的坐标。例如：<br>0,  0, -1, 6<br>1,  0,  0, 0<br>0, -1,  0, 0<br>0,  0,  0, 1<br>这个矩阵表示了在新坐标系下，x方向向量为（0, 1, 0），y方向向量为（0, 0, -1），z方向向量为（-1, 0, 0）和原点坐标为（6, 0, 0）矩阵。需要注意到是x, y, z三个向量要符合右手法则。<br>下面两种写法，作用一样：<br><strong>写法一：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> resliceAxes = vtkSmartPointer&lt;vtkMatrix4x4&gt;::New();</span><br><span class="line"><span class="keyword">auto</span> ImageReslice = vtkSmartPointer&lt;vtkImageReslice&gt;::New();</span><br><span class="line">ImageReslice-&gt;SetResliceAxes(resliceAxes);</span><br></pre></td></tr></table></figure>
<p><strong>写法二：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">double</span> y[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">double</span> z[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">double</span> origin[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">ImageReslice-&gt;SetResliceAxesDirectionCosines(x, y, z);</span><br><span class="line">ImageReslice-&gt;SetResliceAxesOrigin(origin);</span><br></pre></td></tr></table></figure>

<p>脑部CT图像<br><img src="https://img-blog.csdnimg.cn/20191212095550778.gif" alt="在这里插入图片描述"></p>
<h2 id="ResliceImage-cxx"><a href="#ResliceImage-cxx" class="headerlink" title="ResliceImage.cxx"></a>ResliceImage.cxx</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkSmartPointer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkMatrix4x4.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkDICOMImageReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageData.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageReslice.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkLookupTable.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageMapToColors.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageActor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageMapper3D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderWindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderWindowInteractor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkInteractorStyleImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkCommand.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vtkImageInteractionCallback</span> :</span> <span class="keyword">public</span> vtkCommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> vtkImageInteractionCallback* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> vtkImageInteractionCallback;</span><br><span class="line">	&#125;</span><br><span class="line">	vtkImageInteractionCallback()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;Slicing = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageReslice = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;Interactor = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetImageReslice</span><span class="params">(vtkImageReslice* reslice)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageReslice = reslice;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetMapToColors</span><span class="params">(vtkImageMapToColors* colors)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;MapToColors = colors;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetInteractor</span><span class="params">(vtkRenderWindowInteractor* interactor)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;Interactor = interactor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetRenderWindow</span><span class="params">(vtkRenderWindow* window)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;RenderWindow = window;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Execute</span><span class="params">(vtkObject* caller, <span class="keyword">unsigned</span> <span class="keyword">long</span> eventId, <span class="keyword">void</span>* callData)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> lastPos[<span class="number">2</span>], curPos[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">this</span>-&gt;Interactor-&gt;GetLastEventPosition(lastPos);</span><br><span class="line">		<span class="keyword">this</span>-&gt;Interactor-&gt;GetEventPosition(curPos);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (eventId == vtkCommand::LeftButtonPressEvent)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slicing = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (eventId == vtkCommand::LeftButtonReleaseEvent)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slicing = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (eventId == vtkCommand::MouseMoveEvent)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Slicing)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> deltaY = lastPos[<span class="number">1</span>] - curPos[<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">this</span>-&gt;ImageReslice-&gt;Update();</span><br><span class="line">				<span class="keyword">double</span> spacing = <span class="keyword">this</span>-&gt;ImageReslice-&gt;GetOutput()-&gt;GetSpacing()[<span class="number">2</span>];</span><br><span class="line">				vtkMatrix4x4* matrix = <span class="keyword">this</span>-&gt;ImageReslice-&gt;GetResliceAxes();</span><br><span class="line">				<span class="keyword">double</span> point[<span class="number">4</span>], center[<span class="number">4</span>];</span><br><span class="line">				point[<span class="number">0</span>] = <span class="number">0.0</span>;</span><br><span class="line">				point[<span class="number">1</span>] = <span class="number">0.0</span>;</span><br><span class="line">				point[<span class="number">2</span>] = spacing * deltaY;</span><br><span class="line">				point[<span class="number">3</span>] = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">				matrix-&gt;MultiplyPoint(point, center);</span><br><span class="line">				matrix-&gt;SetElement(<span class="number">0</span>, <span class="number">3</span>, center[<span class="number">0</span>]);</span><br><span class="line">				matrix-&gt;SetElement(<span class="number">1</span>, <span class="number">3</span>, center[<span class="number">1</span>]);</span><br><span class="line">				matrix-&gt;SetElement(<span class="number">2</span>, <span class="number">3</span>, center[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">this</span>-&gt;MapToColors-&gt;Update();</span><br><span class="line">				<span class="keyword">this</span>-&gt;OutputImageData = <span class="keyword">this</span>-&gt;MapToColors-&gt;GetOutput();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">this</span>-&gt;Interactor-&gt;Render();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				vtkInteractorStyle* style = vtkInteractorStyle::SafeDownCast(</span><br><span class="line">					<span class="keyword">this</span>-&gt;Interactor-&gt;GetInteractorStyle());</span><br><span class="line">				<span class="keyword">if</span> (style)</span><br><span class="line">					style-&gt;OnMouseMove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Slicing;</span><br><span class="line">	vtkImageReslice* ImageReslice;</span><br><span class="line">	vtkImageMapToColors* MapToColors;</span><br><span class="line">	vtkRenderWindowInteractor* Interactor;</span><br><span class="line">	vtkRenderWindow* RenderWindow;</span><br><span class="line">	vtkImageData* OutputImageData;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; DicomDirectory&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> reader = vtkSmartPointer&lt;vtkDICOMImageReader&gt;::New();</span><br><span class="line">	reader-&gt;SetDirectoryName(argv[<span class="number">1</span>]);</span><br><span class="line">	reader-&gt;Update();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> extent[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">double</span> spacing[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">double</span> origin[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">double</span> center[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">	reader-&gt;GetOutput()-&gt;GetExtent(extent);</span><br><span class="line">	reader-&gt;GetOutput()-&gt;GetSpacing(spacing);</span><br><span class="line">	reader-&gt;GetOutput()-&gt;GetOrigin(origin);</span><br><span class="line"></span><br><span class="line">	center[<span class="number">0</span>] = origin[<span class="number">0</span>] + spacing[<span class="number">0</span>] * <span class="number">0.5</span> * (extent[<span class="number">0</span>] + extent[<span class="number">1</span>]);</span><br><span class="line">	center[<span class="number">1</span>] = origin[<span class="number">1</span>] + spacing[<span class="number">1</span>] * <span class="number">0.5</span> * (extent[<span class="number">2</span>] + extent[<span class="number">3</span>]);</span><br><span class="line">	center[<span class="number">2</span>] = origin[<span class="number">2</span>] + spacing[<span class="number">2</span>] * <span class="number">0.5</span> * (extent[<span class="number">4</span>] + extent[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> sagittalElements[<span class="number">16</span>] = &#123;</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> cornalElements[<span class="number">16</span>] = &#123;</span><br><span class="line">		<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">-1</span>,<span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> axialElements[<span class="number">16</span>] = &#123;</span><br><span class="line">		<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> obliqueElements[<span class="number">16</span>] = &#123;</span><br><span class="line">		<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0.866025</span>, <span class="number">-0.5</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.866025</span>, <span class="number">0</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> resliceAxes = vtkSmartPointer&lt;vtkMatrix4x4&gt;::New();</span><br><span class="line">	resliceAxes-&gt;DeepCopy(axialElements);</span><br><span class="line">	resliceAxes-&gt;SetElement(<span class="number">0</span>, <span class="number">3</span>, center[<span class="number">0</span>]);</span><br><span class="line">	resliceAxes-&gt;SetElement(<span class="number">1</span>, <span class="number">3</span>, center[<span class="number">1</span>]);</span><br><span class="line">	resliceAxes-&gt;SetElement(<span class="number">2</span>, <span class="number">3</span>, center[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> x[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">double</span> y[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">double</span> z[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> ImageReslice = vtkSmartPointer&lt;vtkImageReslice&gt;::New();</span><br><span class="line">	ImageReslice-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line">	ImageReslice-&gt;SetOutputDimensionality(<span class="number">2</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">	ImageReslice-&gt;SetResliceAxes(resliceAxes);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	ImageReslice-&gt;SetResliceAxesDirectionCosines(x, y, z);</span><br><span class="line">	ImageReslice-&gt;SetResliceAxesOrigin(center);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	ImageReslice-&gt;SetInterpolationModeToLinear();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> lookupTable = vtkSmartPointer&lt;vtkLookupTable&gt;::New();</span><br><span class="line">	lookupTable-&gt;SetRange(<span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">	lookupTable-&gt;SetValueRange(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">	lookupTable-&gt;SetSaturationRange(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">	lookupTable-&gt;SetRampToLinear();</span><br><span class="line">	lookupTable-&gt;Build();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> mapToColors = vtkSmartPointer&lt;vtkImageMapToColors&gt;::New();</span><br><span class="line">	mapToColors-&gt;SetLookupTable(lookupTable);</span><br><span class="line">	mapToColors-&gt;SetInputConnection(ImageReslice-&gt;GetOutputPort());</span><br><span class="line">	mapToColors-&gt;Update();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> imageActor = vtkSmartPointer&lt;vtkImageActor&gt;::New();</span><br><span class="line">	imageActor-&gt;GetMapper()-&gt;SetInputConnection(mapToColors-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> renderer = vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	renderer-&gt;AddActor(imageActor);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> renderWindow = vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> imageStyle = vtkSmartPointer&lt;vtkInteractorStyleImage&gt;::New();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> interactor = vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	interactor-&gt;SetInteractorStyle(imageStyle);</span><br><span class="line">	interactor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line">	interactor-&gt;Initialize();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> callback = vtkSmartPointer&lt;vtkImageInteractionCallback&gt;::New();</span><br><span class="line">	callback-&gt;SetImageReslice(ImageReslice);</span><br><span class="line">	callback-&gt;SetMapToColors(mapToColors);</span><br><span class="line">	callback-&gt;SetInteractor(interactor);</span><br><span class="line">	callback-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">	imageStyle-&gt;AddObserver(vtkCommand::LeftButtonPressEvent, callback);</span><br><span class="line">	imageStyle-&gt;AddObserver(vtkCommand::LeftButtonReleaseEvent, callback);</span><br><span class="line">	imageStyle-&gt;AddObserver(vtkCommand::MouseMoveEvent, callback);</span><br><span class="line"></span><br><span class="line">	interactor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Example Download</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://vtk.org/doc/nightly/html/classvtkImageReslice.html#details">vtkImageReslice Class Reference</a><br><a href="https://blog.csdn.net/shenziheng1/article/details/54707462">VTK修炼之道26：图像基本操作_三维图像切片提取</a><br><img src="https://img-blog.csdnimg.cn/20191212095314979.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>DICOM</tag>
        <tag>切片</tag>
        <tag>提取</tag>
        <tag>vtkImageReslice</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——vtk.js工程搭建</title>
    <url>/2020/12/15/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94vtk.js%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>这篇笔记详细说明了vtk.js项目是如何搭建的，旨在快速入手工程搭建，享受web vtk的快乐人生。</p>
<!--有关vtk.js的介绍，可以参考《》。-->

<a id="more"></a>

<h1 id="一-环境"><a href="#一-环境" class="headerlink" title="一.环境"></a>一.环境</h1><p>首先，我们需要安装js的运行环境<strong>Node.js</strong>和<strong>npm</strong>：<br><img src="https://img-blog.csdnimg.cn/2020121113412814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从<a href="https://nodejs.org/en/">Node.js官网</a>可以看到目前最新的版本是15.4.0，为了兼容，我们就选择推荐的14.15.1版本。<br>在Windows上安装需选择全部组件，包括Add to PATH.<br>安装完成后，可通过node -v命令查看结果：</p>
<blockquote>
<p>$ node -v<br>v14.15.1</p>
</blockquote>
<p>npm, node package manager, 即Node.js的包管理器。这个东西很强大，它在Node.js安装的时候就顺带安装好了，也可以通过npm -v命令查看：</p>
<blockquote>
<p>$ npm -v<br>6.14.8</p>
</blockquote>
<h1 id="二-创建"><a href="#二-创建" class="headerlink" title="二.创建"></a>二.创建</h1><p>Ok, 接下来我们来创建一个工程，看看它的结构如何。</p>
<h2 id="1-创建工程主目录"><a href="#1-创建工程主目录" class="headerlink" title="1.创建工程主目录"></a>1.创建工程主目录</h2><blockquote>
<p>$ mkdir MyVtkWebDemo</p>
</blockquote>
<blockquote>
<p>$ cd MyVtkWebDemo/</p>
</blockquote>
<h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><blockquote>
<p>$ npm init<br><img src="https://img-blog.csdnimg.cn/20201211143114603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="3-安装vtk-js及其依赖项"><a href="#3-安装vtk-js及其依赖项" class="headerlink" title="3.安装vtk.js及其依赖项"></a>3.安装<a href="https://kitware.github.io/vtk-js/"><strong>vtk.js</strong></a>及其依赖项</h2><blockquote>
<p>$ npm install vtk.js –save</p>
</blockquote>
<p>可通过命令查看包详细信息：</p>
<blockquote>
<p>$ npm info vtk.js<br><img src="https://img-blog.csdnimg.cn/20201211143308963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="4-安装和配置webpack"><a href="#4-安装和配置webpack" class="headerlink" title="4.安装和配置webpack"></a>4.安装和配置<a href="https://webpack.js.org/"><strong>webpack</strong></a></h2><blockquote>
<p>$ npm install –save-dev webpack</p>
</blockquote>
<p>查看包信息：</p>
<blockquote>
<p>$ npm info webpack<br><img src="https://img-blog.csdnimg.cn/20201211145859852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p>从这里可以看出，webpack的版本为5.10.0，那还需要安装<a href="https://webpack.js.org/api/cli/"><strong>CLI</strong></a>：</p>
<blockquote>
<p>$ npm install –save-dev webpack-cli</p>
</blockquote>
<h2 id="5-新建-webpack-config-js"><a href="#5-新建-webpack-config-js" class="headerlink" title="5.新建./webpack.config.js"></a>5.新建./webpack.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> vtkRules = <span class="built_in">require</span>(<span class="string">&#x27;vtk.js/Utilities/config/dependency.js&#x27;</span>).webpack.core.rules;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional if you want to load *.css and *.module.css files</span></span><br><span class="line"><span class="comment">// var cssRules = require(&#x27;vtk.js/Utilities/config/dependency.js&#x27;).webpack.css.rules;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> entry = path.join(__dirname, <span class="string">&#x27;./src/index.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sourcePath = path.join(__dirname, <span class="string">&#x27;./src&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> outputPath = path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: outputPath,</span><br><span class="line">    filename: <span class="string">&#x27;MyWebApp.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.html$/</span>, loader: <span class="string">&#x27;html-loader&#x27;</span> &#125;,</span><br><span class="line">    ].concat(vtkRules),</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;node_modules&#x27;</span>),</span><br><span class="line">      sourcePath,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="6-修改package-json"><a href="#6-修改package-json" class="headerlink" title="6.修改package.json"></a>6.修改package.json</h2><p>将scripts</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;,</span><br><span class="line">    &quot;build:release&quot;: &quot;webpack --progress --colors --mode production&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --content-base ./dist&quot;,</span><br><span class="line">    &quot;commit&quot;: &quot;git cz&quot;,</span><br><span class="line">    &quot;semantic-release&quot;: &quot;semantic-release&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-创建应用实例"><a href="#7-创建应用实例" class="headerlink" title="7.创建应用实例"></a>7.创建应用实例</h2><p>./<strong>src</strong>/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> vtkFullScreenRenderWindow <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Rendering/Misc/FullScreenRenderWindow&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vtkActor           <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Rendering/Core/Actor&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkCalculator      <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Filters/General/Calculator&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkConeSource      <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Filters/Sources/ConeSource&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vtkMapper          <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Rendering/Core/Mapper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Common/DataModel/DataSetAttributes/Constants&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FieldDataTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;vtk.js/Sources/Common/DataModel/DataSet/Constants&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> controlPanel <span class="keyword">from</span> <span class="string">&#x27;./controller.html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Standard rendering code setup</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullScreenRenderer = vtkFullScreenRenderWindow.newInstance();</span><br><span class="line"><span class="keyword">const</span> renderer = fullScreenRenderer.getRenderer();</span><br><span class="line"><span class="keyword">const</span> renderWindow = fullScreenRenderer.getRenderWindow();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Example code</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coneSource = vtkConeSource.newInstance(&#123; <span class="attr">height</span>: <span class="number">1.0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> filter = vtkCalculator.newInstance();</span><br><span class="line"></span><br><span class="line">filter.setInputConnection(coneSource.getOutputPort());</span><br><span class="line">filter.setFormula(&#123;</span><br><span class="line">  getArrays: <span class="function"><span class="params">inputDataSets</span> =&gt;</span> (&#123;</span><br><span class="line">    input: [],</span><br><span class="line">    output: [</span><br><span class="line">      &#123; <span class="attr">location</span>: FieldDataTypes.CELL, <span class="attr">name</span>: <span class="string">&#x27;Random&#x27;</span>, <span class="attr">dataType</span>: <span class="string">&#x27;Float32Array&#x27;</span>, <span class="attr">attribute</span>: AttributeTypes.SCALARS &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">  evaluate: <span class="function">(<span class="params">arraysIn, arraysOut</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [scalars] = arraysOut.map(<span class="function"><span class="params">d</span> =&gt;</span> d.getData());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; scalars.length; i++) &#123;</span><br><span class="line">      scalars[i] = <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapper = vtkMapper.newInstance();</span><br><span class="line">mapper.setInputConnection(filter.getOutputPort());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actor = vtkActor.newInstance();</span><br><span class="line">actor.setMapper(mapper);</span><br><span class="line"></span><br><span class="line">renderer.addActor(actor);</span><br><span class="line">renderer.resetCamera();</span><br><span class="line">renderWindow.render();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line"><span class="comment">// UI control handling</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">fullScreenRenderer.addController(controlPanel);</span><br><span class="line"><span class="keyword">const</span> representationSelector = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.representations&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resolutionChange = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.resolution&#x27;</span>);</span><br><span class="line"></span><br><span class="line">representationSelector.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newRepValue = <span class="built_in">Number</span>(e.target.value);</span><br><span class="line">  actor.getProperty().setRepresentation(newRepValue);</span><br><span class="line">  renderWindow.render();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">resolutionChange.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resolution = <span class="built_in">Number</span>(e.target.value);</span><br><span class="line">  coneSource.setResolution(resolution);</span><br><span class="line">  renderWindow.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="8-控制模板"><a href="#8-控制模板" class="headerlink" title="8.控制模板"></a>8.控制模板</h2><p>./<strong>src</strong>/controller.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&#x27;representations&#x27;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span>Points<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>Wireframe<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;2&#x27;</span> <span class="attr">selected</span>&gt;</span>Surface<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&#x27;resolution&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;range&#x27;</span> <span class="attr">min</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">max</span>=<span class="string">&#x27;80&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;6&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="9-用于加载生成的应用程序的主web页面"><a href="#9-用于加载生成的应用程序的主web页面" class="headerlink" title="9.用于加载生成的应用程序的主web页面"></a>9.用于加载生成的应用程序的主web页面</h2><p>./<strong>dist</strong>/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;MyWebApp.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三-编译"><a href="#三-编译" class="headerlink" title="三. 编译"></a>三. 编译</h1><p>到这里，我们就可以编译工程了。</p>
<blockquote>
<p>$ npm run build</p>
</blockquote>
<p>看看./dist下面是否生成了应用文件。</p>
<blockquote>
<p>$ ll dist/<br><img src="https://img-blog.csdnimg.cn/20201211165727507.png" alt="在这里插入图片描述"></p>
</blockquote>
<h1 id="四-启动"><a href="#四-启动" class="headerlink" title="四. 启动"></a>四. 启动</h1><p>最后，完事具备，只欠东风。</p>
<blockquote>
<p>$ npm start</p>
</blockquote>
<h1 id="五-效果"><a href="#五-效果" class="headerlink" title="五.效果"></a>五.效果</h1><p>有浏览器打开**<a href="http://localhost:8080/**%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%BB%93%E6%9E%9C%E4%BA%86%E3%80%82%E6%AD%A4%E6%97%B6%E6%AD%A4%E5%88%BB%EF%BC%8C%E6%AD%A4%E6%83%85%E6%AD%A4%E6%99%AF%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%8A%A0%E4%B8%AA%E9%B8%A1%E8%85%BF%E4%BA%86%EF%BC%81">http://localhost:8080/**，就可以看结果了。此时此刻，此情此景，你可以加个鸡腿了！</a><br><img src="https://img-blog.csdnimg.cn/20201211170348928.gif" alt="在这里插入图片描述"></p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://kitware.github.io/vtk-js/docs/intro_vtk_as_es6_dependency.html">Using vtk.js as an ES6 dependency</a><br><img src="https://img-blog.csdnimg.cn/20201211170522570.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>vtk.js</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——医学图像的可视化与交互(vtkImageViewer2)</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B8%8E%E4%BA%A4%E4%BA%92(vtkImageViewer2)/</url>
    <content><![CDATA[<p>在读取了医学图像数据后，下一步就需要将它显示出来和进行交互操作。将3D的医学图像以2D的方式呈现，同时切换切片来帮助医学分析。</p>
<a id="more"></a>

<h2 id="vtkImageViewer2"><a href="#vtkImageViewer2" class="headerlink" title="vtkImageViewer2"></a>vtkImageViewer2</h2><p>一个方便易用的2D图像显示类，它封装了vtkRenderWindow, vtkRender, vtkImageActor和vtkImageMapToWinowLevelColors。同时，包含了一个vtkInteractorStyleImage的交互方式，使得显示和交互变得更加简单。</p>
<p>3D医学图像有很多，不仅只有CT，还有MRI，超声波，X-光等，各具有独特的诊断优势。下面以CT图像数据作为示例。<br><strong>读取数据</strong><br><a href="https://blog.csdn.net/minmindianzi/article/details/100853165">DICOM图像可以使用itk读取</a>，当然vtk也提供了读取类vtkDICOMImageReader。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> reader = vtkSmartPointer&lt;vtkDICOMImageReader&gt;::New();</span><br><span class="line">reader-&gt;SetDirectoryName(argv[<span class="number">1</span>]);</span><br><span class="line">reader-&gt;Update();</span><br></pre></td></tr></table></figure>
<p><strong>设置imageViewer</strong><br>可以设置slice，3维数据的方向，以及窗口大小、窗宽、窗位等等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> imageViewer = vtkSmartPointer&lt;vtkImageViewer2&gt;::New();</span><br><span class="line">imageViewer-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> interactor = vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">imageViewer-&gt;SetupInteractor(interactor);</span><br><span class="line">imageViewer-&gt;SetSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">imageViewer-&gt;SetColorLevel(<span class="number">500</span>);</span><br><span class="line">imageViewer-&gt;SetColorWindow(<span class="number">1000</span>);</span><br><span class="line">imageViewer-&gt;SetSliceOrientationToXY(); <span class="comment">// z-axis</span></span><br><span class="line">imageViewer-&gt;GetRenderer()-&gt;SetBackground(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><strong>设置交互方式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> myStyle = vtkSmartPointer&lt;myVtkInteractorStyleImage&gt;::New();</span><br><span class="line">myStyle-&gt;SetImageViewer(imageViewer);</span><br><span class="line">interactor-&gt;SetInteractorStyle(myStyle);</span><br></pre></td></tr></table></figure>
<h2 id="自定义交互方式"><a href="#自定义交互方式" class="headerlink" title="自定义交互方式"></a>自定义交互方式</h2><p>vtkInteractorStyleImage是默认方式，我们为了通过鼠标滚轮来切换slice，自定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myVtkInteractorStyleImage</span> :</span> <span class="keyword">public</span> vtkInteractorStyleImage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> myVtkInteractorStyleImage* <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line">	vtkTypeMacro(myVtkInteractorStyleImage, vtkInteractorStyleImage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	vtkImageViewer2* ImageViewer;</span><br><span class="line">	<span class="keyword">int</span> Slice;</span><br><span class="line">	<span class="keyword">int</span> MinSlice;</span><br><span class="line">	<span class="keyword">int</span> MaxSlice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetImageViewer</span><span class="params">(vtkImageViewer2* imageViewer)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer = imageViewer;</span><br><span class="line">		<span class="keyword">this</span>-&gt;MinSlice = imageViewer-&gt;GetSliceMin();</span><br><span class="line">		<span class="keyword">this</span>-&gt;MaxSlice = imageViewer-&gt;GetSliceMax();</span><br><span class="line">		<span class="keyword">this</span>-&gt;Slice = (<span class="keyword">this</span>-&gt;MinSlice + <span class="keyword">this</span>-&gt;MaxSlice) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseWheelForward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Slice &lt; <span class="keyword">this</span>-&gt;MaxSlice)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slice += <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseWheelBackward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Slice &gt; <span class="keyword">this</span>-&gt;MinSlice)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slice -= <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vtkStandardNewMacro(myVtkInteractorStyleImage);</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>脑部CT图像<br><img src="https://img-blog.csdnimg.cn/20191028114526447.gif" alt="在这里插入图片描述"></p>
<h2 id="DisplayDICOMSeries-cxx"><a href="#DisplayDICOMSeries-cxx" class="headerlink" title="DisplayDICOMSeries. cxx"></a>DisplayDICOMSeries. cxx</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkSmartPointer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkObjectFactory.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderWindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkGenericRenderWindowInteractor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkActor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkDICOMImageReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkImageViewer2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkInteractorStyleImage.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myVtkInteractorStyleImage</span> :</span> <span class="keyword">public</span> vtkInteractorStyleImage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> myVtkInteractorStyleImage* <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line">	vtkTypeMacro(myVtkInteractorStyleImage, vtkInteractorStyleImage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	vtkImageViewer2* ImageViewer;</span><br><span class="line">	<span class="keyword">int</span> Slice;</span><br><span class="line">	<span class="keyword">int</span> MinSlice;</span><br><span class="line">	<span class="keyword">int</span> MaxSlice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetImageViewer</span><span class="params">(vtkImageViewer2* imageViewer)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer = imageViewer;</span><br><span class="line">		<span class="keyword">this</span>-&gt;MinSlice = imageViewer-&gt;GetSliceMin();</span><br><span class="line">		<span class="keyword">this</span>-&gt;MaxSlice = imageViewer-&gt;GetSliceMax();</span><br><span class="line">		<span class="keyword">this</span>-&gt;Slice = (<span class="keyword">this</span>-&gt;MinSlice + <span class="keyword">this</span>-&gt;MaxSlice) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">		<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseWheelForward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Slice &lt; <span class="keyword">this</span>-&gt;MaxSlice)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slice += <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseWheelBackward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Slice &gt; <span class="keyword">this</span>-&gt;MinSlice)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;Slice -= <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;SetSlice(<span class="keyword">this</span>-&gt;Slice);</span><br><span class="line">			<span class="keyword">this</span>-&gt;ImageViewer-&gt;Render();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vtkStandardNewMacro(myVtkInteractorStyleImage);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; DicomDirectory&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> reader = vtkSmartPointer&lt;vtkDICOMImageReader&gt;::New();</span><br><span class="line">	reader-&gt;SetDirectoryName(argv[<span class="number">1</span>]);</span><br><span class="line">	reader-&gt;Update();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> imageViewer = vtkSmartPointer&lt;vtkImageViewer2&gt;::New();</span><br><span class="line">	imageViewer-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> interactor = vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	imageViewer-&gt;SetupInteractor(interactor);</span><br><span class="line">	imageViewer-&gt;SetSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">	imageViewer-&gt;SetColorLevel(<span class="number">500</span>);</span><br><span class="line">	imageViewer-&gt;SetColorWindow(<span class="number">1000</span>);</span><br><span class="line">	imageViewer-&gt;SetSliceOrientationToXY();</span><br><span class="line">	imageViewer-&gt;GetRenderer()-&gt;SetBackground(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> myStyle = vtkSmartPointer&lt;myVtkInteractorStyleImage&gt;::New();</span><br><span class="line">	myStyle-&gt;SetImageViewer(imageViewer);</span><br><span class="line">	interactor-&gt;SetInteractorStyle(myStyle);</span><br><span class="line"></span><br><span class="line">	imageViewer-&gt;Render();</span><br><span class="line">	imageViewer-&gt;GetRenderer()-&gt;ResetCamera();</span><br><span class="line">	imageViewer-&gt;Render();</span><br><span class="line"></span><br><span class="line">	interactor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/AndyJMR/DisplayDICOMSeries"><strong>Example Download</strong></a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://lorensen.github.io/VTKExamples/site/Cxx/IO/ReadDICOMSeries/">VTKExamples/Cxx/IO/ReadDICOMSeries</a><br><img src="https://img-blog.csdnimg.cn/20191030085400634.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>DICOM</tag>
        <tag>图像</tag>
        <tag>vtkImageViewer2</tag>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——医学图像等值面提取（Marching Cubes）</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%AD%89%E5%80%BC%E9%9D%A2%E6%8F%90%E5%8F%96%EF%BC%88Marching%20Cubes%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是等值面"><a href="#什么是等值面" class="headerlink" title="什么是等值面"></a>什么是等值面</h2><p>引用维基百科的解释：</p>
<blockquote>
<p>等值曲面是一种曲面。在空间里，假若，每一点都有一个设定的值。这值可能是压力、温度、速度、密度。那么，一个等值曲面所包含的每一个点，其设定值是一样的。换句话说，以三维空间为定义域的连续函数，其每一个水平集都是一个等值曲面。</p>
</blockquote>
<blockquote>
<p>应用计算机图形学，我们可以简易地显示出等值曲面的线框图或明暗图。在计算流体力学里，数据视觉化方法时常会用等值曲面来表示流体（液体或气体）流过物体时的瞬时状态。这是工程师研究发展新科技的一个利器。他们可以观察一个系统在任何时间的状态，从而发现其中奥秘。例如，等值曲面可以代表超音速飞行的单独震波。或者，我们可以制造几个等值曲面来代表，当空气流过飞机翅膀时，随着时间演变的一系列压力值。</p>
</blockquote>
<blockquote>
<p>面对着一大堆三维空间的数据，一个明智又受欢迎的选择，就是采用等值曲面为数据视觉化的主要形式。简单的多边形造型渲染的等值曲面，不需要用到很多的中央处理单元的资源，就能够迅速的计算出所要显示的图形。</p>
</blockquote>
<blockquote>
<p>在医学影像里，三维的电脑断层扫描用等值曲面来代表一个密度值区的部位。这样，我们可以将内部器官、骨头、等等，这些结构视觉化。</p>
</blockquote>
<a id="more"></a>

<p>简单的来说，我们可以使用等值面技术可视化感兴趣的区域，比如皮肤，骨骼等。</p>
<h2 id="等值面生成"><a href="#等值面生成" class="headerlink" title="等值面生成"></a>等值面生成</h2><p>等值面可视化的三种技术，体绘制，移动立方体（Marching Cubes）和部分立方体（Dividing Cubes）.<br>这篇笔记主要记录的是移动立方体（Marching Cubes）.</p>
<h2 id="Marching-Cubes的原理"><a href="#Marching-Cubes的原理" class="headerlink" title="Marching Cubes的原理"></a>Marching Cubes的原理</h2><blockquote>
<p>Marching Cubes（移动立方体）方法是由W.E.Lorenson和H.E.Cline在1987年提出来的。由于这一方法原理简单，易于实现，目前已经得到了较为广泛的应用，成为三维数据等值面生成的经典算法，Marching Cubes算法又简称为MC算法。</p>
</blockquote>
<blockquote>
<p>在Marching Cubes方法中，假定原始数据是离散的三维空间规则数据，一个体元定义为由相邻层上的8个顶点组成的一个长方体。为了在三维数据中构造等值面，应先给定所求等值面的值，该方法的基本原理是逐个处理所有的体元，将体元各顶点处的值与给定的阈值进行比较，首先找出与等值面相交的体元，然后通过插值求等值面与体元棱边的交点，并将各交点连成三角形来构成等值面片，所有体元中的三角形集合就构成了等值面。由于这一方法是逐个处理所有的体元，因此被称为Marching Cubes方法。</p>
</blockquote>
<p>关于Marching Cubes原理的详细解释。有兴趣可以参考Lorensen, W. E. and Cline, H. E., “<a href="https://www.researchgate.net/publication/202232897_Marching_Cubes_A_High_Resolution_3D_Surface_Construction_Algorithm">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</a>,” Computer Graphics, vol. 21, no. 3, pp. 163-169, July 1987.</p>
<h2 id="vtk实现类"><a href="#vtk实现类" class="headerlink" title="vtk实现类"></a>vtk实现类</h2><p>在vtk中实现Marching Cubes的算法类有很多，如vtkMarchingCubes,vtkSliceCubes,vtkMarchingSquares,vtkImageMarchingCubes等,它们是针对特定数据集类型而定义的。<br><strong>vtkMarchingCubes</strong><br>vtkMarchingCubes用于提取体数据。</p>
<blockquote>
<p>generate isosurface(s) from volume</p>
</blockquote>
<blockquote>
<p>vtkMarchingCubes is a filter that takes as input a volume (e.g., 3D structured point set) and generates on output one or more isosurfaces. One or more contour values must be specified to generate the isosurfaces. Alternatively, you can specify a min/max scalar range and the number of contours to generate a series of evenly spaced contour values.</p>
</blockquote>
<p><strong>vtkContourFilter</strong><br>vtkContourFilter根据特定的数据集类型自动创建一个最快的子类方法。</p>
<blockquote>
<p>generate isosurfaces/isolines from scalar values</p>
</blockquote>
<blockquote>
<p>vtkContourFilter is a filter that takes as input any dataset and generates on output isosurfaces and/or isolines. The exact form of the output depends upon the dimensionality of the input data. Data consisting of 3D cells will generate isosurfaces, data consisting of 2D cells will generate isolines, and data with 1D or 0D cells will generate isopoints. Combinations of output type are possible if the input dimension is mixed.</p>
</blockquote>
<blockquote>
<p>To use this filter you must specify one or more contour values. You can either use the method SetValue() to specify each contour value, or use GenerateValues() to generate a series of evenly spaced contours. It is also possible to accelerate the operation of this filter (at the cost of extra memory) by using a vtkScalarTree. A scalar tree is used to quickly locate cells that contain a contour surface. This is especially effective if multiple contours are being extracted. If you want to use a scalar tree, invoke the method UseScalarTreeOn().</p>
</blockquote>
<p>下面示例一个生成头部数据皮肤和骨骼的方法。<br><img src="https://img-blog.csdnimg.cn/20200119112210123.gif" alt="在这里插入图片描述"><br>The example uses <a href="https://raw.githubusercontent.com/lorensen/VTKExamples/master/src/Testing/Data/FullHead.mhd">FullHead.mhd</a> which references <a href="https://raw.githubusercontent.com/lorensen/VTKExamples/master/src/Testing/Data/FullHead.mhd">FullHead.raw.gz</a>.</p>
<h2 id="MarchingCubes-cxx"><a href="#MarchingCubes-cxx" class="headerlink" title="MarchingCubes.cxx"></a>MarchingCubes.cxx</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkSmartPointer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkMetaImageReader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkMarchingCubes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkContourFilter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkStripper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkPolyDataNormals.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkPolyDataMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkActor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkProperty.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderWindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkRenderWindowInteractor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkOutlineFilter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vtkNamedColors.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; FullHead.mhd&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> colors = vtkSmartPointer&lt;vtkNamedColors&gt;::New();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>, 4&gt; skinColor&#123; &#123;<span class="number">255</span>, <span class="number">125</span>, <span class="number">64</span>&#125; &#125;;</span><br><span class="line">	colors-&gt;SetColor(<span class="string">&quot;SkinColor&quot;</span>, skinColor.data());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> reader = vtkSmartPointer&lt;vtkMetaImageReader&gt;::New();</span><br><span class="line">	reader-&gt;SetFileName(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">	<span class="comment">// An isosurface, or contour value of 500 is known to correspond to the</span></span><br><span class="line">	<span class="comment">// skin of the patient.</span></span><br><span class="line">	<span class="keyword">auto</span> skinExtractor = vtkSmartPointer&lt;vtkMarchingCubes&gt;::New();</span><br><span class="line">	skinExtractor-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line">	skinExtractor-&gt;SetValue(<span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// An isosurface, or contour value of 1150 is known to correspond to the</span></span><br><span class="line">	<span class="comment">// bone of the patient.</span></span><br><span class="line">	<span class="keyword">auto</span> boneExtractor = vtkSmartPointer&lt;vtkMarchingCubes&gt;::New();</span><br><span class="line">	boneExtractor-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line">	boneExtractor-&gt;SetValue(<span class="number">0</span>, <span class="number">1150</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The triangle stripper is used to create triangle strips from the</span></span><br><span class="line">	<span class="comment">// isosurface; these render much faster on may systems.</span></span><br><span class="line">	<span class="keyword">auto</span> skinStripper = vtkSmartPointer&lt;vtkStripper&gt;::New();</span><br><span class="line">	skinStripper-&gt;SetInputConnection(skinExtractor-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> boneStripper = vtkSmartPointer&lt;vtkStripper&gt;::New();</span><br><span class="line">	boneStripper-&gt;SetInputConnection(boneExtractor-&gt;GetOutputPort());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	<span class="comment">// An isosurface, or contour value of 500 is known to correspond to the</span></span><br><span class="line">	<span class="comment">// skin of the patient.</span></span><br><span class="line">	<span class="keyword">auto</span> skinExtractor = vtkSmartPointer&lt;vtkContourFilter&gt;::New();</span><br><span class="line">	skinExtractor-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line">	skinExtractor-&gt;SetValue(<span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// An isosurface, or contour value of 1150 is known to correspond to the</span></span><br><span class="line">	<span class="comment">// bone of the patient.</span></span><br><span class="line">	<span class="keyword">auto</span> boneExtractor = vtkSmartPointer&lt;vtkContourFilter&gt;::New();</span><br><span class="line">	boneExtractor-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line">	boneExtractor-&gt;SetValue(<span class="number">0</span>, <span class="number">1150</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> skinNormals = vtkSmartPointer&lt;vtkPolyDataNormals&gt;::New();</span><br><span class="line">	skinNormals-&gt;SetInputConnection(skinExtractor-&gt;GetOutputPort());</span><br><span class="line">	skinNormals-&gt;SetFeatureAngle(<span class="number">60.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> boneNormals = vtkSmartPointer&lt;vtkPolyDataNormals&gt;::New();</span><br><span class="line">	boneNormals-&gt;SetInputConnection(boneExtractor-&gt;GetOutputPort());</span><br><span class="line">	boneNormals-&gt;SetFeatureAngle(<span class="number">60.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The triangle stripper is used to create triangle strips from the</span></span><br><span class="line">	<span class="comment">// isosurface; these render much faster on may systems.</span></span><br><span class="line">	<span class="keyword">auto</span> skinStripper = vtkSmartPointer&lt;vtkStripper&gt;::New();</span><br><span class="line">	skinStripper-&gt;SetInputConnection(skinNormals-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> boneStripper = vtkSmartPointer&lt;vtkStripper&gt;::New();</span><br><span class="line">	boneStripper-&gt;SetInputConnection(boneNormals-&gt;GetOutputPort());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> skinMapper = vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	skinMapper-&gt;SetInputConnection(skinStripper-&gt;GetOutputPort());</span><br><span class="line">	skinMapper-&gt;ScalarVisibilityOff();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> boneMapper = vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	boneMapper-&gt;SetInputConnection(boneStripper-&gt;GetOutputPort());</span><br><span class="line">	boneMapper-&gt;ScalarVisibilityOff();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> skin = vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	skin-&gt;SetMapper(skinMapper);</span><br><span class="line">	skin-&gt;GetProperty()-&gt;SetDiffuseColor(colors-&gt;GetColor3d(<span class="string">&quot;SkinColor&quot;</span>).GetData());</span><br><span class="line">	skin-&gt;GetProperty()-&gt;SetSpecular(<span class="number">.3</span>);</span><br><span class="line">	skin-&gt;GetProperty()-&gt;SetSpecularPower(<span class="number">20</span>);</span><br><span class="line">	skin-&gt;GetProperty()-&gt;SetOpacity(<span class="number">.5</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> bone = vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	bone-&gt;SetMapper(boneMapper);</span><br><span class="line">	bone-&gt;GetProperty()-&gt;SetDiffuseColor(colors-&gt;GetColor3d(<span class="string">&quot;Ivory&quot;</span>).GetData());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// An outline provides context around the data.</span></span><br><span class="line">	<span class="keyword">auto</span> outlineData = vtkSmartPointer&lt;vtkOutlineFilter&gt;::New();</span><br><span class="line">	outlineData-&gt;SetInputConnection(reader-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> outlineMapper = vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	outlineMapper-&gt;SetInputConnection(outlineData-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> outline = vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	outline-&gt;SetMapper(outlineMapper);</span><br><span class="line">	outline-&gt;GetProperty()-&gt;SetColor(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> renderer = vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	renderer-&gt;AddActor(skin);</span><br><span class="line">	renderer-&gt;AddActor(bone);</span><br><span class="line">	renderer-&gt;AddActor(outline);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> renWindow = vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renWindow-&gt;SetSize(<span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">	renWindow-&gt;AddRenderer(renderer);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> interactor = vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	interactor-&gt;SetRenderWindow(renWindow);</span><br><span class="line"></span><br><span class="line">	renWindow-&gt;Render();</span><br><span class="line">	interactor-&gt;Initialize();</span><br><span class="line">	interactor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E5%80%BC%E6%9B%B2%E9%9D%A2">等值曲面</a><br><a href="https://baike.baidu.com/item/%E7%AD%89%E5%80%BC%E9%9D%A2">等值面</a><br><a href="https://vtk.org/doc/nightly/html/classvtkMarchingCubes.html">vtkMarchingCubes Class Reference</a><br><a href="https://vtk.org/doc/nightly/html/classvtkContourFilter.html">vtkContourFilter Class Reference</a><br><a href="https://lorensen.github.io/VTKExamples/site/Cxx/Medical/MedicalDemo2/">VTKExamples/Cxx/Medical/MedicalDemo2</a><br><a href="http://www.cs.carleton.edu/cs_comps/0405/shape/marching_cubes.html">An Implementation of the Marching Cubes[1] Algorithm</a><br><img src="https://img-blog.csdnimg.cn/20200119112703319.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>等值面</tag>
        <tag>Marching Cubes</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——医学图像配准（Landmark）</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E9%85%8D%E5%87%86%EF%BC%88Landmark%EF%BC%89/</url>
    <content><![CDATA[<p>随着现代医学的迅速发展，医学影像学为临床诊断提供了多种模态的医学图像，如X射线，CT，MRI等，当然，他们各自有各自的诊断优势。不过，有时候，医生希望将不同图像信息进行适当的集成。然而不同模态的医学图像成像原理不同，风辨率，成像参数却不相同，因此在图像融合前必须进行图像匹配。</p>
<p>医学图像配准就是通过寻找一种（或一系列）的空间变换（旋转、偏移、缩放和变形等），使两幅图像的对应点达到空间位置和解剖结构上的完全一致。配准结果应使两幅图像上是所有的解剖点（精确匹配），或至少是所有具有诊断意义的点都达到匹配（粗略匹配）。</p>
<p>其中，基于标记点对应关系的配准方法已经得到了广泛的应用，即所谓的特征匹配，通常用于图像分割、特征提取和关键点（landmark）搜寻等场合。</p>
<a id="more"></a>

<h2 id="vtkLandmarkTransform"><a href="#vtkLandmarkTransform" class="headerlink" title="vtkLandmarkTransform"></a>vtkLandmarkTransform</h2><p>vtkLandmarkTransform是一种比较经典的匹配算法，基于标记点，两个点集在配准后的平均距离最小，要求输入两个点数必须相等，序号一致的点集，做线性变换。它常用于粗略匹配，效率高。<br>下面简单的示范一下它是如何使用的？</p>
<p><strong>1.源标记点集</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkPoints&gt; sourcePoints =</span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line"><span class="keyword">double</span> sourcePoint1[<span class="number">3</span>] = &#123;<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">sourcePoints-&gt;InsertNextPoint(sourcePoint1);</span><br><span class="line"><span class="keyword">double</span> sourcePoint2[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">sourcePoints-&gt;InsertNextPoint(sourcePoint2);</span><br><span class="line"><span class="keyword">double</span> sourcePoint3[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line">sourcePoints-&gt;InsertNextPoint(sourcePoint3);</span><br></pre></td></tr></table></figure>
<p><strong>2.目标标记点集</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkPoints&gt; targetPoints =</span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line"><span class="keyword">double</span> targetPoint1[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.1</span>&#125;;</span><br><span class="line">targetPoints-&gt;InsertNextPoint(targetPoint1);</span><br><span class="line"><span class="keyword">double</span> targetPoint2[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">1.02</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">targetPoints-&gt;InsertNextPoint(targetPoint2);</span><br><span class="line"><span class="keyword">double</span> targetPoint3[<span class="number">3</span>] = &#123;<span class="number">-1.11</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">targetPoints-&gt;InsertNextPoint(targetPoint3);</span><br></pre></td></tr></table></figure>
<p><strong>3.设置Landmark</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkLandmarkTransform&gt; landmarkTransform = </span><br><span class="line">  vtkSmartPointer&lt;vtkLandmarkTransform&gt;::New();</span><br><span class="line">landmarkTransform-&gt;SetSourceLandmarks(sourcePoints);</span><br><span class="line">landmarkTransform-&gt;SetTargetLandmarks(targetPoints);</span><br><span class="line">landmarkTransform-&gt;SetModeToRigidBody();</span><br><span class="line">landmarkTransform-&gt;Update();</span><br></pre></td></tr></table></figure>
<p><strong>4.获取线性变换</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkMatrix4x4* mat = landmarkTransform-&gt;GetMatrix();</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200108084002895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="LandmarkTransform-cxx"><a href="#LandmarkTransform-cxx" class="headerlink" title="LandmarkTransform.cxx"></a>LandmarkTransform.cxx</h2> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPoints.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkLandmarkTransform.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkMatrix4x4.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkTransformPolyDataFilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVertexGlyphFilter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  This demo creates a coordinate frame (+x, +y, +z) of vectors and a rotated,</span></span><br><span class="line"><span class="comment">  peturbed frame (+z, +y, -x) and aligns the rotated frame to the original as best as possible.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt; sourcePoints =</span><br><span class="line">    vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line">  <span class="keyword">double</span> sourcePoint1[<span class="number">3</span>] = &#123;<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  sourcePoints-&gt;InsertNextPoint(sourcePoint1);</span><br><span class="line">  <span class="keyword">double</span> sourcePoint2[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  sourcePoints-&gt;InsertNextPoint(sourcePoint2);</span><br><span class="line">  <span class="keyword">double</span> sourcePoint3[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line">  sourcePoints-&gt;InsertNextPoint(sourcePoint3);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt; targetPoints =</span><br><span class="line">    vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line">  <span class="keyword">double</span> targetPoint1[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.1</span>&#125;;</span><br><span class="line">  targetPoints-&gt;InsertNextPoint(targetPoint1);</span><br><span class="line">  <span class="keyword">double</span> targetPoint2[<span class="number">3</span>] = &#123;<span class="number">0.0</span>, <span class="number">1.02</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  targetPoints-&gt;InsertNextPoint(targetPoint2);</span><br><span class="line">  <span class="keyword">double</span> targetPoint3[<span class="number">3</span>] = &#123;<span class="number">-1.11</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  targetPoints-&gt;InsertNextPoint(targetPoint3);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Setup the transform</span></span><br><span class="line">  vtkSmartPointer&lt;vtkLandmarkTransform&gt; landmarkTransform = </span><br><span class="line">    vtkSmartPointer&lt;vtkLandmarkTransform&gt;::New();</span><br><span class="line">  landmarkTransform-&gt;SetSourceLandmarks(sourcePoints);</span><br><span class="line">  landmarkTransform-&gt;SetTargetLandmarks(targetPoints);</span><br><span class="line">  landmarkTransform-&gt;SetModeToRigidBody();</span><br><span class="line">  landmarkTransform-&gt;Update(); <span class="comment">//should this be here?</span></span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyData&gt; source =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">  source-&gt;SetPoints(sourcePoints);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkPolyData&gt; target =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">  target-&gt;SetPoints(targetPoints);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkVertexGlyphFilter&gt; sourceGlyphFilter =</span><br><span class="line">    vtkSmartPointer&lt;vtkVertexGlyphFilter&gt;::New();</span><br><span class="line">  sourceGlyphFilter-&gt;SetInputData(source);</span><br><span class="line">  sourceGlyphFilter-&gt;Update();</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkVertexGlyphFilter&gt; targetGlyphFilter =</span><br><span class="line">    vtkSmartPointer&lt;vtkVertexGlyphFilter&gt;::New();</span><br><span class="line">  targetGlyphFilter-&gt;SetInputData(target);</span><br><span class="line">  targetGlyphFilter-&gt;Update();</span><br><span class="line">    </span><br><span class="line">  vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt; transformFilter =</span><br><span class="line">    vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;::New();</span><br><span class="line">  transformFilter-&gt;SetInputConnection(sourceGlyphFilter-&gt;GetOutputPort());</span><br><span class="line">  transformFilter-&gt;SetTransform(landmarkTransform);</span><br><span class="line">  transformFilter-&gt;Update();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Display the transformation matrix that was computed</span></span><br><span class="line">  vtkMatrix4x4* mat = landmarkTransform-&gt;GetMatrix();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Matrix: &quot;</span> &lt;&lt; *mat &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Visualize</span></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; sourceMapper =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  sourceMapper-&gt;SetInputConnection(sourceGlyphFilter-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; sourceActor =</span><br><span class="line">    vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">  sourceActor-&gt;SetMapper(sourceMapper);</span><br><span class="line">  sourceActor-&gt;GetProperty()-&gt;SetColor(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  sourceActor-&gt;GetProperty()-&gt;SetPointSize(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; targetMapper =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  targetMapper-&gt;SetInputConnection(targetGlyphFilter-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; targetActor =</span><br><span class="line">    vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">  targetActor-&gt;SetMapper(targetMapper);</span><br><span class="line">  targetActor-&gt;GetProperty()-&gt;SetColor(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  targetActor-&gt;GetProperty()-&gt;SetPointSize(<span class="number">4</span>);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; solutionMapper =</span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  solutionMapper-&gt;SetInputConnection(transformFilter-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkActor&gt; solutionActor =</span><br><span class="line">    vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">  solutionActor-&gt;SetMapper(solutionMapper);</span><br><span class="line">  solutionActor-&gt;GetProperty()-&gt;SetColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">  solutionActor-&gt;GetProperty()-&gt;SetPointSize(<span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Create a renderer, render window, and interactor</span></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">  renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">  renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the actor to the scene</span></span><br><span class="line">  renderer-&gt;AddActor(sourceActor);</span><br><span class="line">  renderer-&gt;AddActor(targetActor);</span><br><span class="line">  renderer-&gt;AddActor(solutionActor);</span><br><span class="line">  renderer-&gt;SetBackground(<span class="number">.3</span>, <span class="number">.6</span>, <span class="number">.3</span>); <span class="comment">// Background color green</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Render and interact</span></span><br><span class="line">  renderWindow-&gt;Render();</span><br><span class="line">  renderWindowInteractor-&gt;Start();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p> <a href="https://lorensen.github.io/VTKExamples/site/Cxx/Filtering/LandmarkTransform/">VTKExamples/Cxx/Filtering/LandmarkTransform</a><br><img src="https://img-blog.csdnimg.cn/20200108084046881.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>图像</tag>
        <tag>配准</tag>
        <tag>Landmark</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——多边形剪切(vtkSelectPolyData)</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%89%AA%E5%88%87(vtkSelectPolyData)/</url>
    <content><![CDATA[<p>这篇笔记和之前的一篇笔记，<a href="https://blog.csdn.net/minmindianzi/article/details/88848216">VTK笔记——多边形剪切(vtkClipPolyData)</a>，都是关于多边形处理的，但不同的是后者是用封闭的点线来剪切。点线剪切可以在多边形上任意剪切掉一部分，显得比较灵活，就像下面示意这样。A)可以在多边形的中间剪出一个洞，B)也可在多边形边缘剪掉一块。<br><img src="https://img-blog.csdnimg.cn/20190328154020420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="示意图"></p>
<p>我们知道，多边形是由点(points)和面片(cells)组成的。剪切的本身就是对多边形的这些数据进行处理。而在实际应用中，还有更多问题需要考虑。比如，切线是是否是任意的，需不需要过顶点，如果没在顶点上，那是否又需要拆分三角形等等。</p>
<a id="more"></a>

<h3 id="vtkSelectPolyData"><a href="#vtkSelectPolyData" class="headerlink" title="vtkSelectPolyData"></a>vtkSelectPolyData</h3><p>vtk中，<strong>vtkSelectPolyData</strong>，有一个用于多边形剪切的类<br>关于它的描述：</p>
<blockquote>
<p>select portion of polygonal mesh; generate selection scalars</p>
<p>vtkSelectPolyData is a filter that selects polygonal data based on defining a “loop” and indicating the region inside of the loop. The mesh within the loop consists of complete cells (the cells are not cut). Alternatively, this filter can be used to generate scalars. These scalar values, which are a distance measure to the loop, can be used to clip, contour. or extract data (i.e., anything that an implicit function can do).</p>
<p>The loop is defined by an array of x-y-z point coordinates. (Coordinates should be in the same coordinate space as the input polygonal data.) The loop can be concave and non-planar, but not self-intersecting. The input to the filter is a polygonal mesh (only surface primitives such as triangle strips and polygons); the output is either a) a portion of the original mesh laying within the selection loop (GenerateSelectionScalarsOff); or b) the same polygonal mesh with the addition of scalar values (GenerateSelectionScalarsOn).</p>
<p>The algorithm works as follows. For each point coordinate in the loop, the closest point in the mesh is found. The result is a loop of closest point ids from the mesh. Then, the edges in the mesh connecting the closest points (and laying along the lines forming the loop) are found. A greedy edge tracking procedure is used as follows. At the current point, the mesh edge oriented in the direction of and whose end point is closest to the line is chosen. The edge is followed to the new end point, and the procedure is repeated. This process continues until the entire loop has been created.</p>
<p>To determine what portion of the mesh is inside and outside of the loop, three options are possible. 1) the smallest connected region, 2) the largest connected region, and 3) the connected region closest to a user specified point. (Set the ivar SelectionMode.)</p>
<p>Once the loop is computed as above, the GenerateSelectionScalars controls the output of the filter. If on, then scalar values are generated based on distance to the loop lines. Otherwise, the cells laying inside the selection loop are output. By default, the mesh laying within the loop is output; however, if InsideOut is on, then the portion of the mesh laying outside of the loop is output.</p>
<p>The filter can be configured to generate the unselected portions of the mesh as output by setting GenerateUnselectedOutput. Use the method GetUnselectedOutput to access this output. (Note: this flag is pertinent only when GenerateSelectionScalars is off.)</p>
</blockquote>
<p>简单总结一下:</p>
<ol>
<li>选择多边形网格的一部分，输出部分多边形网格或标量，由GenerateSelectionScalarsOn/Off决定</li>
<li>网格的选取是通过一个环(loop)来指定的，可以是凹的和非平面的，但不能自相交</li>
<li>要确定选择网格的那个部分，有三种方式：1)最小连通区域，2)最大连通区域，3)最接近用户选取的连通区域。通过SelectionMode设置</li>
<li>默认是输出环内的网格，不过，可以通过InsideOut设置输出环外的网格</li>
<li>也可以输出未选取的部分，由GenerateUnselectedOutput决定</li>
<li>确保选取的点在一个连通的表面上，否则结果将为空。另外，自相交的结果不可预料</li>
</ol>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><p><strong>构造点</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkPoints&gt; loopPoints =</span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line">  </span><br><span class="line">loopPoints-&gt;InsertNextPoint(<span class="number">-0.16553</span>, <span class="number">0.135971</span>, <span class="number">0.451972</span>);</span><br><span class="line">loopPoints-&gt;InsertNextPoint(<span class="number">-0.0880123</span>, <span class="number">-0.134952</span>, <span class="number">0.4747</span>);</span><br></pre></td></tr></table></figure>
<p><strong>设置剪切</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkSelectPolyData&gt; selectPolyData =</span><br><span class="line">  vtkSmartPointer&lt;vtkSelectPolyData&gt;::New();</span><br><span class="line">selectPolyData-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</span><br><span class="line">selectPolyData-&gt;SetLoop(loopPoints);</span><br><span class="line">selectPolyData-&gt;GenerateUnselectedOutputOn();</span><br><span class="line">selectPolyData-&gt;SetSelectionModeToSmallestRegion(); <span class="comment">//negative scalars inside</span></span><br><span class="line">selectPolyData-&gt;Update();</span><br></pre></td></tr></table></figure>
<p><strong>获取剪切数据</strong><br><code>selectPolyData-&gt;GetOutputPort();</code><br><code>selectPolyData-&gt;GetUnselectedOutput()</code></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20190328163430505.gif" alt="在这里插入图片描述"></p>
<p>实际使用过程中，loop的点可能是通过交互进行拾取的。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSelectPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSphereSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkClipPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkLODActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkNamedColors.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vtkSmartPointer&lt;vtkNamedColors&gt; colors =</span><br><span class="line">    vtkSmartPointer&lt;vtkNamedColors&gt;::New();</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkSphereSource&gt; sphereSource = </span><br><span class="line">    vtkSmartPointer&lt;vtkSphereSource&gt;::New();</span><br><span class="line">  sphereSource-&gt;SetPhiResolution(<span class="number">50</span>);</span><br><span class="line">  sphereSource-&gt;SetThetaResolution(<span class="number">100</span>);</span><br><span class="line">  sphereSource-&gt;Update();</span><br><span class="line">      </span><br><span class="line">  vtkSmartPointer&lt;vtkPoints&gt; loopPoints =</span><br><span class="line">    vtkSmartPointer&lt;vtkPoints&gt;::New();</span><br><span class="line">    </span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">-0.16553</span>, <span class="number">0.135971</span>, <span class="number">0.451972</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">-0.0880123</span>, <span class="number">-0.134952</span>, <span class="number">0.4747</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.00292618</span>, <span class="number">-0.134604</span>, <span class="number">0.482459</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.0641941</span>, <span class="number">0.067112</span>, <span class="number">0.490947</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.15577</span>, <span class="number">0.0734765</span>, <span class="number">0.469245</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.166667</span>, <span class="number">-0.129217</span>, <span class="number">0.454622</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.241259</span>, <span class="number">-0.123363</span>, <span class="number">0.420581</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.240334</span>, <span class="number">0.0727106</span>, <span class="number">0.432555</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.308529</span>, <span class="number">0.0844311</span>, <span class="number">0.384357</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint(<span class="number">0.32672</span>, <span class="number">-0.121674</span>, <span class="number">0.359187</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.380721</span>, <span class="number">-0.117342</span>, <span class="number">0.302527</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.387804</span>, <span class="number">0.0455074</span>, <span class="number">0.312375</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.43943</span>, <span class="number">-0.111673</span>, <span class="number">0.211707</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.470984</span>, <span class="number">-0.0801913</span>, <span class="number">0.147919</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.436777</span>, <span class="number">0.0688872</span>, <span class="number">0.233021</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.44874</span>, <span class="number">0.188852</span>, <span class="number">0.109882</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.391352</span>, <span class="number">0.254285</span>, <span class="number">0.176943</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.373274</span>, <span class="number">0.154162</span>, <span class="number">0.294296</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.274659</span>, <span class="number">0.311654</span>, <span class="number">0.276609</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.206068</span>, <span class="number">0.31396</span>, <span class="number">0.329702</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.263789</span>, <span class="number">0.174982</span>, <span class="number">0.387308</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.213034</span>, <span class="number">0.175485</span>, <span class="number">0.417142</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.169113</span>, <span class="number">0.261974</span>, <span class="number">0.390286</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.102552</span>, <span class="number">0.25997</span>, <span class="number">0.414814</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.131512</span>, <span class="number">0.161254</span>, <span class="number">0.454705</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">0.000192443</span>, <span class="number">0.156264</span>, <span class="number">0.475307</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">-0.0392091</span>, <span class="number">0.000251724</span>, <span class="number">0.499943</span>);</span><br><span class="line">  loopPoints-&gt;InsertNextPoint( <span class="number">-0.096161</span>, <span class="number">0.159646</span>, <span class="number">0.46438</span>);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkSelectPolyData&gt; selectPolyData =</span><br><span class="line">    vtkSmartPointer&lt;vtkSelectPolyData&gt;::New();</span><br><span class="line">  selectPolyData-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</span><br><span class="line">  selectPolyData-&gt;SetLoop(loopPoints);</span><br><span class="line">  selectPolyData-&gt;GenerateUnselectedOutputOn();</span><br><span class="line">  selectPolyData-&gt;SetSelectionModeToSmallestRegion(); <span class="comment">//negative scalars inside</span></span><br><span class="line">  selectPolyData-&gt;Update();</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkProperty&gt; backProp =</span><br><span class="line">	  vtkSmartPointer&lt;vtkProperty&gt;::New();</span><br><span class="line">  backProp-&gt;SetColor(colors-&gt;GetColor3d(<span class="string">&quot;tomato&quot;</span>).GetData());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; selectMapper = </span><br><span class="line">    vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  selectMapper-&gt;SetInputData(selectPolyData-&gt;GetUnselectedOutput());</span><br><span class="line">  <span class="comment">//selectMapper-&gt;ScalarVisibilityOff();</span></span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkLODActor&gt; selectActor = </span><br><span class="line">    vtkSmartPointer&lt;vtkLODActor&gt;::New();</span><br><span class="line">  selectActor-&gt;SetMapper(selectMapper);</span><br><span class="line">  selectActor-&gt;SetBackfaceProperty(backProp);</span><br><span class="line">  selectActor-&gt;GetProperty()-&gt;SetColor(colors-&gt;GetColor3d(<span class="string">&quot;banana&quot;</span>).GetData());</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkPolyDataMapper&gt; unselectMapper =</span><br><span class="line">	  vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">  unselectMapper-&gt;SetInputConnection(selectPolyData-&gt;GetOutputPort());</span><br><span class="line">  <span class="comment">//unselectMapper-&gt;ScalarVisibilityOff();</span></span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkLODActor&gt; unselectActor =</span><br><span class="line">	  vtkSmartPointer&lt;vtkLODActor&gt;::New();</span><br><span class="line">  unselectActor-&gt;SetMapper(unselectMapper);</span><br><span class="line">  unselectActor-&gt;SetBackfaceProperty(backProp);</span><br><span class="line">  unselectActor-&gt;GetProperty()-&gt;SetColor(colors-&gt;GetColor3d(<span class="string">&quot;banana&quot;</span>).GetData());</span><br><span class="line">    </span><br><span class="line">  vtkSmartPointer&lt;vtkRenderer&gt; renderer1 =</span><br><span class="line">	  vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderer&gt; renderer2 =</span><br><span class="line">	  vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line"></span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">  renderWindow-&gt;AddRenderer(renderer1);</span><br><span class="line">  renderWindow-&gt;AddRenderer(renderer2);</span><br><span class="line">  </span><br><span class="line">  vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; interactor =</span><br><span class="line">    vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">  interactor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the actors to the renderer, set the background and size</span></span><br><span class="line">  renderer1-&gt;AddActor (selectActor);</span><br><span class="line">  renderer1-&gt;SetBackground (colors-&gt;GetColor3d(<span class="string">&quot;slate_grey&quot;</span>).GetData());</span><br><span class="line">  renderer1-&gt;SetViewport(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  renderer2-&gt;AddActor(unselectActor);</span><br><span class="line">  renderer2-&gt;SetBackground(colors-&gt;GetColor3d(<span class="string">&quot;slate_blue&quot;</span>).GetData());</span><br><span class="line">  renderer2-&gt;SetViewport(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  renderWindow-&gt;SetSize (<span class="number">800</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  renderWindow-&gt;Render();</span><br><span class="line">  interactor-&gt;Start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://vtk.org/doc/nightly/html/classvtkSelectPolyData.html">vtkSelectPolyData Class Reference</a><br><a href="https://www.paraview.org/Wiki/VTK/Examples/Cxx/PolyData/SelectPolyData">SelectPolyData Examples</a><br><img src="https://img-blog.csdnimg.cn/20190328163005611.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>vtkSelectPolyData</tag>
        <tag>剪切</tag>
        <tag>标量</tag>
        <tag>多边形</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——多边形剪切(vtkClipPolyData)</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%89%AA%E5%88%87(vtkClipPolyData)/</url>
    <content><![CDATA[<p>在三维图形中，往往会涉及到对多边形的处理，多边形剪切就是其中之一。什么是多边形剪切？打个比方，如果把多边形比作西瓜的话，那剪切就相当于用水果刀切西瓜，一刀下去，西瓜就被切成两块。当然，也可以切两下，三下，甚至更多。</p>
<a id="more"></a>

<h3 id="vtkClipPolyData"><a href="#vtkClipPolyData" class="headerlink" title="vtkClipPolyData"></a>vtkClipPolyData</h3><p>vtkClipPolyData，一个用于多边形剪切模型的方法类。<br>关于它的用法，引用一段描述：</p>
<blockquote>
<p>clip polygonal data with user-specified implicit function or input scalar data<br>vtkClipPolyData is a filter that clips polygonal data using either any subclass of vtkImplicitFunction, or the input scalar data. Clipping means that it actually “cuts” through the cells of the dataset, returning everything inside of the specified implicit function (or greater than the scalar value) including “pieces” of a cell. (Compare this with vtkExtractGeometry, which pulls out entire, uncut cells.) The output of this filter is polygonal data.<br>To use this filter, you must decide if you will be clipping with an implicit function, or whether you will be using the input scalar data. If you want to clip with an implicit function, you must: 1) define an implicit function 2) set it with the SetClipFunction method 3) apply the GenerateClipScalarsOn method If a ClipFunction is not specified, or GenerateClipScalars is off (the default), then the input’s scalar data will be used to clip the polydata.<br>You can also specify a scalar value, which is used to decide what is inside and outside of the implicit function. You can also reverse the sense of what inside/outside is by setting the InsideOut instance variable. (The cutting algorithm proceeds by computing an implicit function value or using the input scalar data for each point in the dataset. This is compared to the scalar value to determine inside/outside.)<br>This filter can be configured to compute a second output. The second output is the polygonal data that is clipped away. Set the GenerateClippedData boolean on if you wish to access this output data.</p>
</blockquote>
<p>描述清楚的表明，多边形剪切，有两种基本方式，指定隐函数和输入标量数据。</p>
<h4 id="隐函数"><a href="#隐函数" class="headerlink" title="隐函数"></a>隐函数</h4><p>数学中的定义是这样，</p>
<blockquote>
<p>隐函数是由隐式方程所隐含定义的函数。设F（x,y）是某个定义域上的函数。如果存在定义域上的子集D，使得对每个x属于D，存在相应的y满足F(x,y)=0，则称方程确定了一个隐函数。</p>
</blockquote>
<p>VTK中，继承vtkImplicitFunction类的子类都可以用作隐函数，如稍后示例用到的vtkPlane。<br>不一一列举了，用一幅图来表示：<br><img src="https://img-blog.csdnimg.cn/20190328105014672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="标量数据"><a href="#标量数据" class="headerlink" title="标量数据"></a>标量数据</h4><p>在物理学中，标量定义，</p>
<blockquote>
<p>标量（scalar），亦称“无向量”。有些物理量，只具有数值大小，而没有方向，部分有正负之分。物理学中，标量（或作纯量）指在坐标变换下保持不变的物理量。用通俗的说法，标量是只有大小，没有方向的量。</p>
</blockquote>
<p>vtk中，标量数据是数据集里的每个位置具有单值的数据，它只表示数据的大小，如温度、压力、密度、高度。是属性数据的一种。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面简单的用隐函数vtkPlane将圆球vtkSphereSource剪切成两部分。</p>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><p><strong>构造切割平面</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkPlane *plane = vtkPlane::New();</span><br><span class="line">vtkSmartPointer&lt;vtkPlane&gt; plane =</span><br><span class="line">	vtkSmartPointer&lt;vtkPlane&gt;::New();</span><br><span class="line">plane-&gt;SetOrigin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">plane-&gt;SetNormal(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><strong>设置隐函数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkClipPolyData&gt; clipPolyData =</span><br><span class="line">	vtkSmartPointer&lt;vtkClipPolyData&gt;::New();</span><br><span class="line">clipPolyData-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</span><br><span class="line">clipPolyData-&gt;SetClipFunction(plane);</span><br><span class="line">clipPolyData-&gt;GenerateClippedOutputOn();</span><br><span class="line">clipPolyData-&gt;Update();</span><br></pre></td></tr></table></figure>
<p><strong>SetGenerateClippedOutput</strong>用于设置是否生成被剪切掉的部分，默认是不生成的。<br><strong>获取剪切数据</strong><br>剪切留下的部分：<br><code>clipPolyData-&gt;GetClippedOutputPort();</code><br>被剪切掉的部分（如果GenerateClippedOutput是off，将无法获取）：<br><code>clipPolyData-&gt;GetOutputPort();</code></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20191213113001241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="ClipPolydata-cxx"><a href="#ClipPolydata-cxx" class="headerlink" title="ClipPolydata.cxx"></a>ClipPolydata.cxx</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSphereSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCamera.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkInteractorStyleTrackballCamera.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkNamedColors.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkClipPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPlane.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vtkSmartPointer&lt;vtkSphereSource&gt; sphereSource =</span><br><span class="line">		vtkSmartPointer&lt;vtkSphereSource&gt;::New();</span><br><span class="line">	sphereSource-&gt;SetCenter(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">	sphereSource-&gt;SetRadius(<span class="number">5.0</span>);</span><br><span class="line">	sphereSource-&gt;Update();</span><br><span class="line"></span><br><span class="line">	vtkPlane *vPlane = vtkPlane::New();</span><br><span class="line">	vtkSmartPointer&lt;vtkPlane&gt; plane =</span><br><span class="line">		vtkSmartPointer&lt;vtkPlane&gt;::New();</span><br><span class="line">	plane-&gt;SetOrigin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">	plane-&gt;SetNormal(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkClipPolyData&gt; clipPolyData =</span><br><span class="line">		vtkSmartPointer&lt;vtkClipPolyData&gt;::New();</span><br><span class="line">	clipPolyData-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</span><br><span class="line">	clipPolyData-&gt;SetClipFunction(plane);</span><br><span class="line">	clipPolyData-&gt;GenerateClippedOutputOn();</span><br><span class="line">	clipPolyData-&gt;Update();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; mapper1 =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	mapper1-&gt;SetInputConnection(clipPolyData-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; actor1 =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	actor1-&gt;SetMapper(mapper1);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; mapper2 =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	mapper2-&gt;SetInputConnection(clipPolyData-&gt;GetClippedOutputPort());</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; actor2 =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	actor2-&gt;SetMapper(mapper2);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkNamedColors&gt; colors =</span><br><span class="line">		vtkSmartPointer&lt;vtkNamedColors&gt;::New();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderer&gt; renderer1 =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	renderer1-&gt;SetBackground(colors-&gt;GetColor3d(<span class="string">&quot;Slate_grey&quot;</span>).GetData());</span><br><span class="line">	renderer1-&gt;AddActor(actor1);</span><br><span class="line">	renderer1-&gt;SetViewport(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderer&gt; renderer2 =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	renderer2-&gt;SetBackground(colors-&gt;GetColor3d(<span class="string">&quot;Slate_blue&quot;</span>).GetData());</span><br><span class="line">	renderer2-&gt;AddActor(actor2);</span><br><span class="line">	renderer2-&gt;SetViewport(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renderWindow-&gt;SetSize(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer1);</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer2);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt; style =</span><br><span class="line">		vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt;::New();</span><br><span class="line">	renderWindowInteractor-&gt;SetInteractorStyle(style);</span><br><span class="line"></span><br><span class="line">	renderWindow-&gt;Render();</span><br><span class="line">	renderWindowInteractor-&gt;Initialize();</span><br><span class="line">	renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://vtk.org/doc/nightly/html/classvtkClipPolyData.html">vtkClipPolyData Class Reference</a><br><img src="https://img-blog.csdnimg.cn/20190328100418987.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>剪切</tag>
        <tag>多边形</tag>
        <tag>vtkClipPolyData</tag>
        <tag>隐函数</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——拾取器Picker</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8B%BE%E5%8F%96%E5%99%A8Picker/</url>
    <content><![CDATA[<p>&#8195;&#8195;很多时候，医疗软件避免不了人机交互，而拾取器在人机交互中扮演着重要的角色，也是经常被用到，比如说，拾取点，拾取actor，拾取cell等等。</p>
<h2 id="拾取类"><a href="#拾取类" class="headerlink" title="拾取类"></a>拾取类</h2><p>VTK很强大，也很周到，提供了多种拾取类。<br><img src="https://img-blog.csdnimg.cn/20190913154219281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><p>有时候选择太多也不是一件好事。那要怎样选择？我们得知道他们的区别。<br>简单的说，拾取器可分两类：<br>一类是基于硬件拾取，vtkPropPicker及其子类<br>另一类是基于几何拾取，vtkPicker和它的子类<br>硬件拾取的快速，但获取信息有限<br>几何拾取获得的信息多，但速度要慢一些</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例演示了通过鼠标移动在一个二维图像上拾取像素值，并判断是否在图像区域上。<br><img src="https://img-blog.csdnimg.cn/20190913203402914.gif" alt="在这里插入图片描述"></p>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PickerType = vtkPropPicker; <span class="comment">// vtkPointPicker</span></span><br></pre></td></tr></table></figure>
<p>定义picker并初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> picker = vtkSmartPointer&lt;PickerType&gt;::New();</span><br><span class="line">picker-&gt;PickFromListOn();</span><br></pre></td></tr></table></figure>
<p>添加拾取的Prop对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkImageActor* imageActor = imageViewer-&gt;GetImageActor();</span><br><span class="line">picker-&gt;AddPickList(imageActor);</span><br></pre></td></tr></table></figure>
<p>绑定自定义事件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> callback = vtkSmartPointer&lt;vtkImageInteractionCallback&gt;::New();</span><br><span class="line">callback-&gt;SetPicker(picker);</span><br></pre></td></tr></table></figure>
<p>获取世界坐标</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> pos[<span class="number">3</span>];</span><br><span class="line">picker-&gt;GetPickPosition(pos);</span><br></pre></td></tr></table></figure>

<p>值得注意：<br><strong>就上面的需求而言，这里应该选用vtkPropPicker，在vtk7.1.0中，可以拾取到坐标值，但在vtk8.2.0，不能获取到坐标，使用vtkPointPicker可以得到，目前原因未知。</strong></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkAssemblyPath.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCommand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCornerAnnotation.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageCast.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageNoiseSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageViewer2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkInteractorStyleImage.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkMath.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPointData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPropPicker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPointPicker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCellPicker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkTIFFReader.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkTextProperty.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PickerType = vtkPointPicker;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Template for image value reading</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vtkValueMessageTemplate</span><span class="params">(vtkImageData* image, <span class="keyword">int</span>* position,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="built_in">std</span>::<span class="built_in">string</span>&amp; message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  T* tuple = ((T*)image-&gt;GetScalarPointer(position));</span><br><span class="line">  <span class="keyword">int</span> components = image-&gt;GetNumberOfScalarComponents();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; components; ++c)</span><br><span class="line">  &#123;</span><br><span class="line">    message += vtkVariant(tuple[c]).ToString();</span><br><span class="line">    <span class="keyword">if</span> (c != (components - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      message += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  message += <span class="string">&quot; )&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The mouse motion callback, to pick the image and recover pixel values</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vtkImageInteractionCallback</span> :</span> <span class="keyword">public</span> vtkCommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> vtkImageInteractionCallback* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> vtkImageInteractionCallback;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vtkImageInteractionCallback()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Viewer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Picker = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Annotation = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~vtkImageInteractionCallback()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Viewer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Picker = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Annotation = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetPicker</span><span class="params">(PickerType* picker)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Picker = picker;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetAnnotation</span><span class="params">(vtkCornerAnnotation* annotation)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Annotation = annotation;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetViewer</span><span class="params">(vtkImageViewer2* viewer)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Viewer = viewer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">(vtkObject*, <span class="keyword">unsigned</span> <span class="keyword">long</span> vtkNotUsed(event), <span class="keyword">void</span>*)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    vtkRenderWindowInteractor* interactor =</span><br><span class="line">        <span class="keyword">this</span>-&gt;Viewer-&gt;GetRenderWindow()-&gt;GetInteractor();</span><br><span class="line">	<span class="keyword">int</span>* clickPos = interactor-&gt;GetEventPosition();</span><br><span class="line">    vtkRenderer* renderer = <span class="keyword">this</span>-&gt;Viewer-&gt;GetRenderer();</span><br><span class="line">	<span class="comment">//vtkRenderer* renderer = interactor-&gt;FindPokedRenderer(clickPos[0], clickPos[1]);</span></span><br><span class="line">    vtkImageActor* actor = <span class="keyword">this</span>-&gt;Viewer-&gt;GetImageActor();</span><br><span class="line">    vtkImageData* image = <span class="keyword">this</span>-&gt;Viewer-&gt;GetInput();</span><br><span class="line">    vtkInteractorStyle* style =</span><br><span class="line">        <span class="keyword">dynamic_cast</span>&lt;vtkInteractorStyle*&gt;(interactor-&gt;GetInteractorStyle());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick at the mouse location provided by the interactor</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;Picker-&gt;Pick(clickPos[<span class="number">0</span>], clickPos[<span class="number">1</span>], <span class="number">0.0</span>, renderer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There could be other props assigned to this picker, so</span></span><br><span class="line">    <span class="comment">// make sure we picked the image actor</span></span><br><span class="line">    vtkAssemblyPath* path = <span class="keyword">this</span>-&gt;Picker-&gt;GetPath();</span><br><span class="line">    <span class="keyword">bool</span> validPick = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (path)</span><br><span class="line">    &#123;</span><br><span class="line">      vtkCollectionSimpleIterator sit;</span><br><span class="line">      path-&gt;InitTraversal(sit);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path-&gt;GetNumberOfItems() &amp;&amp; !validPick; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">auto</span> node = path-&gt;GetNextNode(sit);</span><br><span class="line">        <span class="keyword">if</span> (actor == <span class="keyword">dynamic_cast</span>&lt;vtkImageActor*&gt;(node-&gt;GetViewProp()))</span><br><span class="line">        &#123;</span><br><span class="line">          validPick = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!validPick)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;Annotation-&gt;SetText(<span class="number">0</span>, <span class="string">&quot;Off Image&quot;</span>);</span><br><span class="line">      interactor-&gt;Render();</span><br><span class="line">      <span class="comment">// Pass the event further on</span></span><br><span class="line">      style-&gt;OnMouseMove();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the world coordinates of the pick</span></span><br><span class="line">    <span class="keyword">double</span> pos[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">this</span>-&gt;Picker-&gt;GetPickPosition(pos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> image_coordinate[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> axis = <span class="keyword">this</span>-&gt;Viewer-&gt;GetSliceOrientation();</span><br><span class="line">    <span class="keyword">switch</span> (axis)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> vtkImageViewer2::SLICE_ORIENTATION_XZ:</span><br><span class="line">      image_coordinate[<span class="number">0</span>] = vtkMath::Round(pos[<span class="number">0</span>]);</span><br><span class="line">      image_coordinate[<span class="number">1</span>] = <span class="keyword">this</span>-&gt;Viewer-&gt;GetSlice();</span><br><span class="line">      image_coordinate[<span class="number">2</span>] = vtkMath::Round(pos[<span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> vtkImageViewer2::SLICE_ORIENTATION_YZ:</span><br><span class="line">      image_coordinate[<span class="number">0</span>] = <span class="keyword">this</span>-&gt;Viewer-&gt;GetSlice();</span><br><span class="line">      image_coordinate[<span class="number">1</span>] = vtkMath::Round(pos[<span class="number">1</span>]);</span><br><span class="line">      image_coordinate[<span class="number">2</span>] = vtkMath::Round(pos[<span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// vtkImageViewer2::SLICE_ORIENTATION_XY</span></span><br><span class="line">      image_coordinate[<span class="number">0</span>] = vtkMath::Round(pos[<span class="number">0</span>]);</span><br><span class="line">      image_coordinate[<span class="number">1</span>] = vtkMath::Round(pos[<span class="number">1</span>]);</span><br><span class="line">      image_coordinate[<span class="number">2</span>] = <span class="keyword">this</span>-&gt;Viewer-&gt;GetSlice();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> message = <span class="string">&quot;Location: ( &quot;</span>;</span><br><span class="line">    message += vtkVariant(image_coordinate[<span class="number">0</span>]).ToString();</span><br><span class="line">    message += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    message += vtkVariant(image_coordinate[<span class="number">1</span>]).ToString();</span><br><span class="line">    message += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    message += vtkVariant(image_coordinate[<span class="number">2</span>]).ToString();</span><br><span class="line">    message += <span class="string">&quot; )\nValue: ( &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (image-&gt;GetScalarType())</span><br><span class="line">    &#123;</span><br><span class="line">      vtkTemplateMacro(</span><br><span class="line">          (vtkValueMessageTemplate&lt;VTK_TT&gt;(image, image_coordinate, message)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;Annotation-&gt;SetText(<span class="number">0</span>, message.c_str());</span><br><span class="line">    interactor-&gt;Render();</span><br><span class="line">    style-&gt;OnMouseMove();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  vtkImageViewer2* Viewer;         <span class="comment">// Pointer to the viewer</span></span><br><span class="line">  PickerType* Picker;           <span class="comment">// Pointer to the picker</span></span><br><span class="line">  vtkCornerAnnotation* Annotation; <span class="comment">// Pointer to the annotation</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> imageViewer = vtkSmartPointer&lt;vtkImageViewer2&gt;::New();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Verify input arguments</span></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; Required parameters: (tif) Filename&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;missing...&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A noise image will be created!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a noise image</span></span><br><span class="line">    <span class="keyword">auto</span> noiseSource = vtkSmartPointer&lt;vtkImageNoiseSource&gt;::New();</span><br><span class="line">    noiseSource-&gt;SetWholeExtent(<span class="number">0</span>, <span class="number">512</span>, <span class="number">0</span>, <span class="number">512</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    noiseSource-&gt;SetMinimum(<span class="number">0.0</span>);</span><br><span class="line">    noiseSource-&gt;SetMaximum(<span class="number">65535.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cast noise image to unsigned short</span></span><br><span class="line">    <span class="keyword">auto</span> imageCast = vtkSmartPointer&lt;vtkImageCast&gt;::New();</span><br><span class="line">    imageCast-&gt;SetInputConnection(noiseSource-&gt;GetOutputPort());</span><br><span class="line">    imageCast-&gt;SetOutputScalarTypeToUnsignedShort();</span><br><span class="line">    imageCast-&gt;Update();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to image viewer pipeline</span></span><br><span class="line">    imageViewer-&gt;SetInputConnection(imageCast-&gt;GetOutputPort());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Parse input argument</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> inputFilename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the image</span></span><br><span class="line">    <span class="keyword">auto</span> tiffReader = vtkSmartPointer&lt;vtkTIFFReader&gt;::New();</span><br><span class="line">    <span class="keyword">if</span> (!tiffReader-&gt;CanReadFile(inputFilename.c_str()))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;: Error reading file &quot;</span> &lt;&lt; inputFilename</span><br><span class="line">                &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    tiffReader-&gt;SetFileName(inputFilename.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to image viewer pipeline</span></span><br><span class="line">    imageViewer-&gt;SetInputConnection(tiffReader-&gt;GetOutputPort());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Picker to pick pixels</span></span><br><span class="line">  <span class="keyword">auto</span> picker = vtkSmartPointer&lt;PickerType&gt;::New();</span><br><span class="line">  picker-&gt;PickFromListOn();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Give the picker a prop to pick</span></span><br><span class="line">  vtkImageActor* imageActor = imageViewer-&gt;GetImageActor();</span><br><span class="line">  picker-&gt;AddPickList(imageActor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// disable interpolation, so we can see each pixel</span></span><br><span class="line">  imageActor-&gt;InterpolateOff();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Visualize</span></span><br><span class="line">  <span class="keyword">auto</span> renderWindowInteractor =</span><br><span class="line">      vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">  imageViewer-&gt;SetupInteractor(renderWindowInteractor);</span><br><span class="line">  imageViewer-&gt;SetSize(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">  vtkRenderer* renderer = imageViewer-&gt;GetRenderer();</span><br><span class="line">  renderer-&gt;ResetCamera();</span><br><span class="line">  renderer-&gt;GradientBackgroundOn();</span><br><span class="line">  renderer-&gt;SetBackground(<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.5</span>);</span><br><span class="line">  renderer-&gt;SetBackground2(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">0.2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Annotate the image with window/level and mouse over pixel</span></span><br><span class="line">  <span class="comment">// information</span></span><br><span class="line">  <span class="keyword">auto</span> cornerAnnotation = vtkSmartPointer&lt;vtkCornerAnnotation&gt;::New();</span><br><span class="line">  cornerAnnotation-&gt;SetLinearFontScaleFactor(<span class="number">2</span>);</span><br><span class="line">  cornerAnnotation-&gt;SetNonlinearFontScaleFactor(<span class="number">1</span>);</span><br><span class="line">  cornerAnnotation-&gt;SetMaximumFontSize(<span class="number">20</span>);</span><br><span class="line">  cornerAnnotation-&gt;SetText(<span class="number">0</span>, <span class="string">&quot;Off Image&quot;</span>);</span><br><span class="line">  cornerAnnotation-&gt;SetText(<span class="number">3</span>, <span class="string">&quot;&lt;window&gt;\n&lt;level&gt;&quot;</span>);</span><br><span class="line">  cornerAnnotation-&gt;GetTextProperty()-&gt;SetColor(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  imageViewer-&gt;GetRenderer()-&gt;AddViewProp(cornerAnnotation);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Callback listens to MouseMoveEvents invoked by the interactor&#x27;s style</span></span><br><span class="line">  <span class="keyword">auto</span> callback = vtkSmartPointer&lt;vtkImageInteractionCallback&gt;::New();</span><br><span class="line">  callback-&gt;SetViewer(imageViewer);</span><br><span class="line">  callback-&gt;SetAnnotation(cornerAnnotation);</span><br><span class="line">  callback-&gt;SetPicker(picker);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// InteractorStyleImage allows for the following controls:</span></span><br><span class="line">  <span class="comment">// 1) middle mouse + move = camera pan</span></span><br><span class="line">  <span class="comment">// 2) left mouse + move = window/level</span></span><br><span class="line">  <span class="comment">// 3) right mouse + move = camera zoom</span></span><br><span class="line">  <span class="comment">// 4) middle mouse wheel scroll = zoom</span></span><br><span class="line">  <span class="comment">// 5) &#x27;r&#x27; = reset window/level</span></span><br><span class="line">  <span class="comment">// 6) shift + &#x27;r&#x27; = reset camera</span></span><br><span class="line">  vtkInteractorStyleImage* imageStyle = imageViewer-&gt;GetInteractorStyle();</span><br><span class="line">  imageStyle-&gt;AddObserver(vtkCommand::MouseMoveEvent, callback);</span><br><span class="line"></span><br><span class="line">  renderWindowInteractor-&gt;Initialize();</span><br><span class="line">  renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/webzhuce/article/details/72802322">VTK交互之拾取</a><br><a href="https://lorensen.github.io/VTKExamples/site/Cxx/Images/PickPixel2/">VTKExamples/Cxx/Images/PickPixel2</a><br><a href="https://vtk.org/doc/nightly/html/classvtkAbstractPicker.html#details">vtkAbstractPicker Class Reference</a><br><img src="https://img-blog.csdnimg.cn/20190913204656180.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>拾取器</tag>
        <tag>picker</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——提取边界(vtkFeatureEdges)</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E5%8F%96%E8%BE%B9%E7%95%8C(vtkFeatureEdges)/</url>
    <content><![CDATA[<p>vtkFeatureEdges，VTK的一个类，用于边界提取。<br>提取的边界包括：<br>1)边界(boundary)，只被一个多边形使用的边，或者直线单元；<br>2)非流行(non-manifold)，被三个以上的多边形共用的边；<br>3)特征边(feature edges)，被两个三角形使用且二面角大于特征角的边；<br>4)流行边(manifold edges)，只被两个多边形使用的边。</p>
<a id="more"></a>

<h3 id="常用于"><a href="#常用于" class="headerlink" title="常用于"></a>常用于</h3><h4 id="1-提取模型的边界"><a href="#1-提取模型的边界" class="headerlink" title="1)提取模型的边界"></a>1)提取模型的边界</h4><p><img src="https://img-blog.csdnimg.cn/20190401172931378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkFeatureEdges&gt; boundaryEdges =</span><br><span class="line">	vtkSmartPointer&lt;vtkFeatureEdges&gt;::New();</span><br><span class="line">boundaryEdges-&gt;SetInputConnection(diskSource-&gt;GetOutputPort());</span><br><span class="line">boundaryEdges-&gt;BoundaryEdgesOn();</span><br><span class="line">boundaryEdges-&gt;FeatureEdgesOff();</span><br><span class="line">boundaryEdges-&gt;ManifoldEdgesOff();</span><br><span class="line">boundaryEdges-&gt;NonManifoldEdgesOff();</span><br><span class="line">boundaryEdges-&gt;Update();</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：提取出来的边界点是无序的，可以用vtkCleanPolyData使其变得有序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkStripper&gt; stripper =</span><br><span class="line">	vtkSmartPointer&lt;vtkStripper&gt;::New();</span><br><span class="line">stripper-&gt;SetInputConnection(featureEdges-&gt;GetOutputPort());</span><br><span class="line">stripper-&gt;JoinContiguousSegmentsOn();</span><br><span class="line"></span><br><span class="line">vtkSmartPointer&lt;vtkCleanPolyData&gt; cleanPolyData =</span><br><span class="line">	vtkSmartPointer&lt;vtkCleanPolyData&gt;::New();</span><br><span class="line">cleanPolyData-&gt;SetInputConnection(stripper-&gt;GetOutputPort());</span><br><span class="line">cleanPolyData-&gt;Update();</span><br></pre></td></tr></table></figure>

<h4 id="2-检测模型是否闭合"><a href="#2-检测模型是否闭合" class="headerlink" title="2)检测模型是否闭合"></a>2)检测模型是否闭合</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkFeatureEdges&gt; closedSurface =</span><br><span class="line">	vtkSmartPointer&lt;vtkFeatureEdges&gt;::New();</span><br><span class="line">closedSurface-&gt;SetInputConnection(diskSource-&gt;GetOutputPort());</span><br><span class="line">closedSurface-&gt;FeatureEdgesOff();</span><br><span class="line">closedSurface-&gt;BoundaryEdgesOn();</span><br><span class="line">closedSurface-&gt;NonManifoldEdgesOn();</span><br><span class="line">closedSurface-&gt;Update();</span><br><span class="line"><span class="keyword">int</span> numberOfOpenEdges = closedSurface-&gt;GetOutput()-&gt;GetNumberOfCells();</span><br><span class="line"><span class="keyword">if</span> (numberOfOpenEdges &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Surface is not closed&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Surface is closed&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkFeatureEdges.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkDiskSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vtkSmartPointer&lt;vtkDiskSource&gt; diskSource =</span><br><span class="line">		vtkSmartPointer&lt;vtkDiskSource&gt;::New();</span><br><span class="line">	diskSource-&gt;Update();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkFeatureEdges&gt; boundaryEdges =</span><br><span class="line">		vtkSmartPointer&lt;vtkFeatureEdges&gt;::New();</span><br><span class="line">	boundaryEdges-&gt;SetInputConnection(diskSource-&gt;GetOutputPort());</span><br><span class="line">	boundaryEdges-&gt;BoundaryEdgesOn();</span><br><span class="line">	boundaryEdges-&gt;FeatureEdgesOff();</span><br><span class="line">	boundaryEdges-&gt;ManifoldEdgesOff();</span><br><span class="line">	boundaryEdges-&gt;NonManifoldEdgesOff();</span><br><span class="line">	boundaryEdges-&gt;Update();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkFeatureEdges&gt; closedSurface =</span><br><span class="line">		vtkSmartPointer&lt;vtkFeatureEdges&gt;::New();</span><br><span class="line">	closedSurface-&gt;SetInputConnection(diskSource-&gt;GetOutputPort());</span><br><span class="line">	closedSurface-&gt;FeatureEdgesOff();</span><br><span class="line">	closedSurface-&gt;BoundaryEdgesOn();</span><br><span class="line">	closedSurface-&gt;NonManifoldEdgesOn();</span><br><span class="line">	closedSurface-&gt;Update();</span><br><span class="line">	<span class="keyword">int</span> numberOfOpenEdges = closedSurface-&gt;GetOutput()-&gt;GetNumberOfCells();</span><br><span class="line">	<span class="keyword">if</span> (numberOfOpenEdges &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Surface is not closed&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Surface is closed&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Visualize</span></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; edgeMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	edgeMapper-&gt;SetInputConnection(boundaryEdges-&gt;GetOutputPort());</span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; edgeActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	edgeActor-&gt;SetMapper(edgeMapper);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; diskMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	diskMapper-&gt;SetInputConnection(diskSource-&gt;GetOutputPort());</span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; diskActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	diskActor-&gt;SetMapper(diskMapper);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a renderer, render window, and interactor</span></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renderWindow-&gt;SetSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">	renderer-&gt;AddActor(edgeActor);</span><br><span class="line">	renderer-&gt;AddActor(diskActor);</span><br><span class="line">	renderer-&gt;SetBackground(<span class="number">.3</span>, <span class="number">.6</span>, <span class="number">.3</span>); <span class="comment">// Background color green</span></span><br><span class="line"></span><br><span class="line">	renderWindow-&gt;Render();</span><br><span class="line">	renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://vtk.org/doc/nightly/html/classvtkFeatureEdges.html">vtkFeatureEdges Class Reference</a><br><a href="https://lorensen.github.io/VTKExamples/site/Cxx/Meshes/BoundaryEdges/">BoundaryEdges</a><br><a href="https://cmake.org/Wiki/VTK/Examples/Cxx/PolyData/ClosedSurface">ClosedSurface</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190401173222525.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>vtkFeatureEdges</tag>
        <tag>边界</tag>
        <tag>闭合</tag>
        <tag>boundary</tag>
        <tag>closed surface</tag>
        <tag>Cross product</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——有向包围盒（OBB）</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%9C%89%E5%90%91%E5%8C%85%E5%9B%B4%E7%9B%92%EF%BC%88OBB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是有向包围盒"><a href="#什么是有向包围盒" class="headerlink" title="什么是有向包围盒"></a>什么是有向包围盒</h2><p><a href="https://blog.csdn.net/minmindianzi/article/details/90897803">《VTK笔记——轴对齐包围盒（AABB）》</a>提到了有向包围盒(OBB/Oriented bounding box)。<br>有向包围盒，是较为常用的包围盒类型。简单的说，它就是包围模型的最小盒子，是根据模型的几何形状来决定包围盒的大小和方向，无需和坐标轴垂直，方向是任意的，这是它的特点，但也导致了生成的复杂性。</p>
<a id="more"></a>

<h2 id="如何获取有向包围盒"><a href="#如何获取有向包围盒" class="headerlink" title="如何获取有向包围盒"></a>如何获取有向包围盒</h2><p>在VTK中，有一个算法类vtkOBBTree可以得到有向包围盒。它是一个Tree，为什么需要Tree？这是一种为了得到复杂模型的包围盒常用的一种方法，以一种更加专业的包围盒层次对模型进行分解。基本思路就是将模型组织成一个树状结构，根节点是整个模型，每个叶子节点包括一个简单的局部。<br><strong>Description</strong></p>
<blockquote>
<p>generate oriented bounding box (OBB) tree</p>
</blockquote>
<blockquote>
<p>vtkOBBTree is an object to generate oriented bounding box (OBB) trees. An oriented bounding box is a bounding box that does not necessarily line up along coordinate axes. The OBB tree is a hierarchical tree structure of such boxes, where deeper levels of OBB confine smaller regions of space.</p>
</blockquote>
<blockquote>
<p>To build the OBB, a recursive, top-down process is used. First, the root OBB is constructed by finding the mean and covariance matrix of the cells (and their points) that define the dataset. The eigenvectors of the covariance matrix are extracted, giving a set of three orthogonal vectors that define the tightest-fitting OBB. To create the two children OBB’s, a split plane is found that (approximately) divides the number cells in half. These are then assigned to the children OBB’s. This process then continues until the MaxLevel ivar limits the recursion, or no split plane can be found.</p>
</blockquote>
<blockquote>
<p>A good reference for OBB-trees is Gottschalk &amp; Manocha in Proceedings of Siggraph `96.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxLevel = <span class="number">10</span>;</span><br><span class="line">vtkSmartPointer&lt;vtkOBBTree&gt; obbTree =</span><br><span class="line">	vtkSmartPointer&lt;vtkOBBTree&gt;::New();</span><br><span class="line">obbTree-&gt;SetDataSet(polydata);</span><br><span class="line">obbTree-&gt;SetMaxLevel(maxLevel);</span><br><span class="line">obbTree-&gt;BuildLocator();</span><br><span class="line"> </span><br><span class="line">vtkSmartPointer&lt;vtkPolyData&gt; obbPolydata =</span><br><span class="line">	vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">obbTree-&gt;GenerateRepresentation(<span class="number">0</span>, obbPolydata);</span><br></pre></td></tr></table></figure>
<p>SetMaxLevel设置Tree的最大层级，默认是8.<br>GenerateRepresentation用于获取指定层级的polydata.</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>整个模型的OBB<br><img src="https://img-blog.csdnimg.cn/20190605165744166.gif" alt="图1"><br>模型分层次的OBB<br><img src="https://img-blog.csdnimg.cn/20190605170005556.gif" alt="在这里插入图片描述"></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSphereSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkXMLPolyDataReader.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkOBBTree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkNamedColors.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vtkSmartPointer&lt;vtkNamedColors&gt; colors =</span><br><span class="line">		vtkSmartPointer&lt;vtkNamedColors&gt;::New();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyData&gt; polydata =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">	<span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		vtkSmartPointer&lt;vtkXMLPolyDataReader&gt; reader =</span><br><span class="line">			vtkSmartPointer&lt;vtkXMLPolyDataReader&gt;::New();</span><br><span class="line">		reader-&gt;SetFileName(argv[<span class="number">1</span>]);</span><br><span class="line">		reader-&gt;Update();</span><br><span class="line">		polydata = reader-&gt;GetOutput();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		vtkSmartPointer&lt;vtkSphereSource&gt; modelSource =</span><br><span class="line">			vtkSmartPointer&lt;vtkSphereSource&gt;::New();</span><br><span class="line">		modelSource-&gt;Update();</span><br><span class="line">		polydata = modelSource-&gt;GetOutput();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> maxLevel = <span class="number">10</span>;</span><br><span class="line">	vtkSmartPointer&lt;vtkOBBTree&gt; obbTree =</span><br><span class="line">		vtkSmartPointer&lt;vtkOBBTree&gt;::New();</span><br><span class="line">	obbTree-&gt;SetDataSet(polydata);</span><br><span class="line">	obbTree-&gt;SetMaxLevel(maxLevel);</span><br><span class="line">	obbTree-&gt;BuildLocator();</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyData&gt; obbPolydata =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">	obbTree-&gt;GenerateRepresentation(<span class="number">0</span>, obbPolydata);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; modelMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	modelMapper-&gt;SetInputData(polydata);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; modelActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	modelActor-&gt;SetMapper(modelMapper);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; obbTreeMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	obbTreeMapper-&gt;SetInputData(obbPolydata);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; obbTreeActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	obbTreeActor-&gt;SetMapper(obbTreeMapper);</span><br><span class="line">	obbTreeActor-&gt;GetProperty()-&gt;SetInterpolationToFlat();</span><br><span class="line">	obbTreeActor-&gt;GetProperty()-&gt;SetOpacity(<span class="number">.5</span>);</span><br><span class="line">	obbTreeActor-&gt;GetProperty()-&gt;SetColor(</span><br><span class="line">		colors-&gt;GetColor4d(<span class="string">&quot;SpringGreen&quot;</span>).GetData());</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renderWindow-&gt;SetSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">	renderer-&gt;AddActor(modelActor);</span><br><span class="line">	renderer-&gt;AddActor(obbTreeActor);</span><br><span class="line"></span><br><span class="line">	renderWindow-&gt;Render();</span><br><span class="line">	renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://vtk.org/doc/nightly/html/classvtkOBBTree.html#details">vtkOBBTree Class Reference</a><br><a href="https://lorensen.github.io/VTKExamples/site/Cxx/DataStructures/VisualizeOBBTree/">VisualizeOBBTree</a><br><a href="https://www.cnblogs.com/lyggqm/p/5386174.html">[算法][包围盒]球，AABB，OBB</a><br><img src="https://img-blog.csdnimg.cn/20190605172453758.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>box</tag>
        <tag>obb</tag>
        <tag>包围盒</tag>
      </tags>
  </entry>
  <entry>
    <title>VTK笔记——轴对齐包围盒（AABB）</title>
    <url>/2020/12/14/VTK%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%BD%B4%E5%AF%B9%E9%BD%90%E5%8C%85%E5%9B%B4%E7%9B%92%EF%BC%88AABB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是包围盒"><a href="#什么是包围盒" class="headerlink" title="什么是包围盒"></a>什么是包围盒</h2><p>包围盒是指能够包容物体的立方体或者二维长方形，是包围体的一种，常常用于模型的碰撞检测。包围体主要包括球体、<a href="https://blog.csdn.net/minmindianzi/article/details/90897803">轴对齐包围盒(AABB)</a>、<a href="https://blog.csdn.net/minmindianzi/article/details/90903855">有向包围盒(OBB)</a>和凸包(Convex Hull)。<br>在较早的时候，包围盒按照坐标系的坐标轴进行排列，这被称为轴对齐的包围盒(AABB/Axis-aligned bounding box)。为了将AABB与通用的情况区分开来，将任意的包围盒称为有向包围盒(OBB/Oriented bounding box)。AABB检测模型的相交要比OBB更简单，但是他的缺点是当模型旋转的时候无法随之旋转，而必须重新计算。</p>
<a id="more"></a>

<h2 id="轴对齐包围盒"><a href="#轴对齐包围盒" class="headerlink" title="轴对齐包围盒"></a>轴对齐包围盒</h2><p>在VTK中，轴对齐包围盒被定义为包含该模型，且边平行于坐标轴的最小六面体。AABB比较简单，存储空间小，仅需六个标量。<br><strong>获取的标量</strong>也很简单，vtkPolyData中定义了GetBounds()函数，用来获取包围盒的参数，即三个轴向上的最大值和最小值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkPolyData&gt; polydata =</span><br><span class="line">	vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line"><span class="keyword">double</span> bounds[<span class="number">6</span>];</span><br><span class="line">polydata-&gt;GetBounds(bounds);</span><br></pre></td></tr></table></figure>
<p>需要注意的是，通过reader或者source来的模型，需要先Update()；<br>而有时候仅仅是获取这些参数并不直观，还需要<br><strong>显示包围盒</strong>，vtkOutlineFilter提供了这一方便的操作，输入模型的数据，就很容易的可视化显示。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vtkSmartPointer&lt;vtkOutlineFilter&gt; outline =</span><br><span class="line">	vtkSmartPointer&lt;vtkOutlineFilter&gt;::New();</span><br><span class="line">outline-&gt;SetInputData(polydata);</span><br><span class="line">outline-&gt;Update();</span><br></pre></td></tr></table></figure>
<p>Default Solid face is off, on:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">outline-&gt;GenerateFacesOn();</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20190605134407585.gif" alt="cow"></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyData.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSphereSource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkXMLPolyDataReader.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkActor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPolyDataMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkOutlineFilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkProperty.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vtkSmartPointer&lt;vtkPolyData&gt; polydata =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyData&gt;::New();</span><br><span class="line">	<span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		vtkSmartPointer&lt;vtkXMLPolyDataReader&gt; reader =</span><br><span class="line">			vtkSmartPointer&lt;vtkXMLPolyDataReader&gt;::New();</span><br><span class="line">		reader-&gt;SetFileName(argv[<span class="number">1</span>]);</span><br><span class="line">		reader-&gt;Update();</span><br><span class="line">		polydata = reader-&gt;GetOutput();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		vtkSmartPointer&lt;vtkSphereSource&gt; modelSource =</span><br><span class="line">			vtkSmartPointer&lt;vtkSphereSource&gt;::New();</span><br><span class="line">		modelSource-&gt;Update();</span><br><span class="line">		polydata = modelSource-&gt;GetOutput();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkOutlineFilter&gt; outline =</span><br><span class="line">		vtkSmartPointer&lt;vtkOutlineFilter&gt;::New();</span><br><span class="line">	outline-&gt;SetInputData(polydata);</span><br><span class="line">	outline-&gt;Update();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> bounds[<span class="number">6</span>];</span><br><span class="line">	polydata-&gt;GetBounds(bounds);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Polydata bounds: &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;xmin: &quot;</span> &lt;&lt; bounds[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;xmax: &quot;</span> &lt;&lt; bounds[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;ymin: &quot;</span> &lt;&lt; bounds[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;ymax: &quot;</span> &lt;&lt; bounds[<span class="number">3</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;zmin: &quot;</span> &lt;&lt; bounds[<span class="number">4</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;zmax: &quot;</span> &lt;&lt; bounds[<span class="number">5</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	outline-&gt;GetOutput()-&gt;GetBounds(bounds);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Outline bounds: &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;xmin: &quot;</span> &lt;&lt; bounds[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;xmax: &quot;</span> &lt;&lt; bounds[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;ymin: &quot;</span> &lt;&lt; bounds[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;ymax: &quot;</span> &lt;&lt; bounds[<span class="number">3</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;zmin: &quot;</span> &lt;&lt; bounds[<span class="number">4</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">			  &lt;&lt; <span class="string">&quot;zmax: &quot;</span> &lt;&lt; bounds[<span class="number">5</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; modelMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	modelMapper-&gt;SetInputData(polydata);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; modelActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	modelActor-&gt;SetMapper(modelMapper);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkPolyDataMapper&gt; outlineMapper =</span><br><span class="line">		vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</span><br><span class="line">	outlineMapper-&gt;SetInputConnection(outline-&gt;GetOutputPort());</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkActor&gt; outlineActor =</span><br><span class="line">		vtkSmartPointer&lt;vtkActor&gt;::New();</span><br><span class="line">	outlineActor-&gt;SetMapper(outlineMapper);</span><br><span class="line">	outlineActor-&gt;GetProperty()-&gt;SetColor(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	outlineActor-&gt;GetProperty()-&gt;SetLineWidth(<span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line">	vtkSmartPointer&lt;vtkRenderer&gt; renderer =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderer&gt;::New();</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindow&gt; renderWindow =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</span><br><span class="line">	renderWindow-&gt;SetSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">	renderWindow-&gt;AddRenderer(renderer);</span><br><span class="line">	vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor =</span><br><span class="line">		vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</span><br><span class="line">	renderWindowInteractor-&gt;SetRenderWindow(renderWindow);</span><br><span class="line"></span><br><span class="line">	renderer-&gt;AddActor(modelActor);</span><br><span class="line">	renderer-&gt;AddActor(outlineActor);</span><br><span class="line"></span><br><span class="line">	renderWindow-&gt;Render();</span><br><span class="line">	renderWindowInteractor-&gt;Start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8C%85%E5%9B%B4%E4%BD%93">维基百科.包围体</a><br><a href="https://vtk.org/Wiki/VTK/Examples/Cxx/PolyData/DataBounds">VTK/Examples/Cxx/PolyData/DataBounds</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190605134455113.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="The End"></p>
]]></content>
      <categories>
        <category>VTK笔记</category>
      </categories>
      <tags>
        <tag>VTK</tag>
        <tag>box</tag>
        <tag>包围盒</tag>
        <tag>AABB</tag>
        <tag>bound</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>向量叉积(Cross product)的几何意义及应用</title>
    <url>/2020/12/14/%E5%90%91%E9%87%8F%E5%8F%89%E7%A7%AF(Cross%20product)%E7%9A%84%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="向量叉积"><a href="#向量叉积" class="headerlink" title="向量叉积"></a>向量叉积</h3><p><img src="https://img-blog.csdnimg.cn/20190824192822500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="叉乘"><br>仅在三维空间，两个向量的叉积才有定义，记作 <strong>u</strong> ^ <strong>v</strong><br>定义为：<br>  <strong>u</strong> ^ <strong>v</strong> = ||<strong>u</strong>|| ||<strong>v</strong>|| sin(θ) <strong>n</strong><br>其中，θ表示<strong>u</strong> 和 <strong>v</strong> 的夹角， ||<strong>u</strong>|| 和 ||<strong>v</strong>|| 分别是向量 <strong>u</strong>和<strong>v</strong> 的模，<strong>n</strong> 则是<strong>u</strong>、<strong>v</strong> 所构成平面的法向（垂直于<strong>u</strong>、<strong>v</strong>平面的单位向量），方向由右手定则决定。</p>
<a id="more"></a>

<h3 id="矩阵表示"><a href="#矩阵表示" class="headerlink" title="矩阵表示"></a>矩阵表示</h3><p>叉积可以表示成如下行列式：<br><img src="https://img-blog.csdnimg.cn/2019082419592843.png" alt="在这里插入图片描述"><br>其中， <strong>u</strong> = (u1, u2, u3)，<strong>v</strong> = (v1, v2, v3)，<strong>i</strong>、<strong>j</strong>、<strong>k</strong>为基向量，为三维坐标系的x, y, z方向的单位向量。<br>这个行列式可以使用拉普拉斯在展开和萨吕法则计算。<br>使用拉普拉斯展开可以沿第一展开为：<br><img src="https://img-blog.csdnimg.cn/20190824200456188.png" alt="在这里插入图片描述"><br>使用萨吕法则可以展开为：<br><img src="https://img-blog.csdnimg.cn/20190824200532629.png" alt="在这里插入图片描述"></p>
<h3 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h3><p>根据定义可以得出，向量叉积的几何意义是以<strong>u</strong>和<strong>v</strong>为零边的平行四边形的有向面积。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>在计算机图形学中，向量叉乘的应用广泛。比如，判断线段的相对位置，线段相交，点在多边形内，求凸包等。</p>
<h4 id="判断两条线段的相对位置"><a href="#判断两条线段的相对位置" class="headerlink" title="判断两条线段的相对位置"></a>判断两条线段的相对位置</h4><p><img src="https://img-blog.csdnimg.cn/20190824224332900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在二维平面上有两条线段，分别是AB和AC，如何通过向量叉积来确定他们的相对位置关系<br>点A、B、C的坐标为<br><img src="https://img-blog.csdnimg.cn/2019082611035115.png" alt="A(xa, Ya)"><br><img src="https://img-blog.csdnimg.cn/20190826110439827.png" alt="B(Xb, Yb)"><br><img src="https://img-blog.csdnimg.cn/20190826110453247.png" alt="P(Xp, Yp)"><br>首先构造两个向量AB和AC,<br><img src="https://img-blog.csdnimg.cn/2019082422440981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于二维空间不存在叉积的定义，所以引入z轴，将向量AB、AC扩展到三维空间，可以将二位向量可看作z轴恒为0的三维向量，<br>那么，两个向量叉积的则可表示为：<br><img src="https://img-blog.csdnimg.cn/20190826110046459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbm1pbmRpYW56aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>res &gt; 0, AC在AB的逆时针方向<br>res = 0, AB和AC共线<br>res &lt; 0, AC在AB的顺时针方向</p>
]]></content>
      <categories>
        <category>计算机数学</category>
      </categories>
      <tags>
        <tag>Cross product</tag>
        <tag>向量</tag>
        <tag>叉积</tag>
      </tags>
  </entry>
</search>
